<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucas Possatti</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://possatti.com.br/"/>
  <updated>2016-07-12T08:35:01.484Z</updated>
  <id>http://possatti.com.br/</id>
  
  <author>
    <name>Lucas Possatti</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Curso de git</title>
    <link href="http://possatti.com.br/curso-de-git/"/>
    <id>http://possatti.com.br/curso-de-git/</id>
    <published>2016-07-12T08:32:52.000Z</published>
    <updated>2016-07-12T08:35:01.484Z</updated>
    
    <content type="html">&lt;p&gt;Após minha saída do LEDS, com a ajuda dos professores do IFES, eu criei uma série de vídeo tutoriais sobre o Git. Nos vídeos eu explico sobre as funções mais básicas, e algumas mais complexas. Em todos os vídeos eu me preocupei em explicar as coisas de forma que um iniciante conseguisse trabalhar tranquilamente usando o Git após o curso. E eu também falo um pouco sobre &lt;em&gt;workflows&lt;/em&gt; e as formas como você pode trabalhar em equipe ao final.&lt;/p&gt;
&lt;p&gt;Criar esse curso foi uma experiência totalmente nova para mim. E nos primeiros vídeos eu estava incrivelmente nervoso, mas consegui melhorar um pouco ao longo dos vídeos.&lt;/p&gt;
&lt;p&gt;Eu queria ter editado cada um dos vídeos que eu gravei em meu computador, para cortar algumas partes desnecessárias e alguns erros, e para dar uma polida nos vídeos. Mas, infelizmente, eu não consegui editar os vídeos de forma satisfatória. E como já estava demorando muito, resolvemos publicar os vídeos da forma que foi possível (sem edição).&lt;/p&gt;
&lt;p&gt;Então, apesar de não estar perfeito, vos apresento o curso: &lt;a href=&quot;https://youtu.be/TC5r2qGiqcI?list=PLo7sFyCeiGUdIyEmHdfbuD2eR4XPDqnN2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Após minha saída do LEDS, com a ajuda dos professores do IFES, eu criei uma série de vídeo tutoriais sobre o Git.
    
    </summary>
    
    
      <category term="git" scheme="http://possatti.com.br/tags/git/"/>
    
      <category term="leds" scheme="http://possatti.com.br/tags/leds/"/>
    
  </entry>
  
  <entry>
    <title>Sincap</title>
    <link href="http://possatti.com.br/sincap/"/>
    <id>http://possatti.com.br/sincap/</id>
    <published>2016-07-12T07:54:40.000Z</published>
    <updated>2016-07-12T08:00:04.656Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/sincap-reportagem.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Durante a faculdade no IFES campus Serra, eu tive a oportunidade de participar do &lt;a href=&quot;http://leds.sr.ifes.edu.br/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LEDS&lt;/a&gt;. No tempo em que estive lá, eu trabalhei principalmente em um projeto chamado &lt;a href=&quot;http://leds.sr.ifes.edu.br/portfolio/sincap/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sincap&lt;/a&gt;. Que foi um sistema para auxiliar no processo de doações de córneas do estado do Espírito Santo.&lt;/p&gt;
&lt;p&gt;Durante o seu desenvolvimento, o Sincap apareceu em uma &lt;a href=&quot;http://www.gazetaonline.com.br/_conteudo/2014/08/noticias/cidades/1495041-alunos-do-ifes-criam-sistema-de-captacao-de-cornea.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reportagem no jornal A Gazeta&lt;/a&gt;, e uma &lt;a href=&quot;http://www.folhavitoria.com.br/videos/2014/08/2934103-011-captacao-de-orgaos-mais-rapida.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reportagem no jornal ES NO AR, na TV Vitória&lt;/a&gt;. E também foi &lt;a href=&quot;http://leds.sr.ifes.edu.br/sincap-e-premiado-na-11a-semana-estadual-de-ciencia-e-tecnologia/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;premiado na 11ª Semana Estadual de Ciência e Tecnologia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O processo natural para a doação de córneas no Espírito Santo é todo feito por telefonemas e formulários preenchidos a mão, que são enviados para lá e para cá através de Fax. O Sincap foi criado como uma tentativa de modernizar e agilizar esse processo.&lt;/p&gt;
&lt;p&gt;Infelizmente, pelo que eu conversei com amigos que ainda estão no LEDS, o Sincap ainda não foi implantado, em função de um pouco de burocracia e um desandamento nas negociações.&lt;/p&gt;
&lt;p&gt;É uma pena. Mas independente do seu fim, eu aprendi bastante com esse projeto. E tenho certeza que a equipe inteira também. Trabalhar com o Sincap foi a primeira experiência que eu tive de trabalhar em um projeto real. Nós tínhamos que fazer a parte de análise e projeto do sistema, fazer entrevistas com o cliente, implementar, testar o sistema, e etc. Cada membro da equipe trabalhava com um pouco de cada coisa.&lt;/p&gt;
&lt;p&gt;O Sincap foi praticamente a minha primeira vez trabalhando em um sistema Web. Eu aprendi muita coisa trabalhando nele. Nós usamos Java e &lt;a href=&quot;https://spring.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Framework&lt;/a&gt; para construir o servidor Web. &lt;a href=&quot;http://hibernate.org/orm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hibernate&lt;/a&gt; para a persistência de dados. O &lt;a href=&quot;https://maven.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Maven&lt;/a&gt; para gerenciar as dependências e as &lt;em&gt;builds&lt;/em&gt; do projeto. E para a parte de &lt;em&gt;front-end&lt;/em&gt;, um dos professores comprou um template de interface de administrador (baseado em &lt;a href=&quot;http://getbootstrap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bootstrap&lt;/a&gt;) que nós usávamos para construir as telas. Também chegamos ao ponto de construir um servidor de integração contínua usando &lt;a href=&quot;https://jenkins.io/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins&lt;/a&gt;, apesar de que ele não era realmente usado enquanto estive lá. E usávamos o &lt;a href=&quot;https://git-scm.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt; para o controle de versão.&lt;/p&gt;
&lt;p&gt;Foram muitas as lições aprendidas. E não era tudo um mar de rosas, mas no geral foi bom trabalhar no projeto.  :)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      O Sincap foi um projeto em que trabalhei durante o meu tempo no LEDS.
    
    </summary>
    
    
      <category term="leds" scheme="http://possatti.com.br/tags/leds/"/>
    
  </entry>
  
  <entry>
    <title>Minha experiência no LEDS</title>
    <link href="http://possatti.com.br/leds/"/>
    <id>http://possatti.com.br/leds/</id>
    <published>2016-07-12T06:10:53.000Z</published>
    <updated>2016-07-12T07:56:21.570Z</updated>
    
    <content type="html">&lt;p&gt;Durante a faculdade no IFES campus Serra, eu fiz parte do LEDS. Com a minha saída deste laboratório, eu publiquei um post no blog do LEDS, e nele eu conto sobre o que eu vivi ali dentro.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Este é um post que publiquei no blog do LEDS, como minha despedida. No post eu conto sobre o que vivi dentro do laboratório.
    
    </summary>
    
    
      <category term="leds" scheme="http://possatti.com.br/tags/leds/"/>
    
  </entry>
  
  <entry>
    <title>Tutorial de Shell Script</title>
    <link href="http://possatti.com.br/shell-script/"/>
    <id>http://possatti.com.br/shell-script/</id>
    <published>2016-06-30T15:41:53.000Z</published>
    <updated>2016-07-12T08:03:56.131Z</updated>
    
    <content type="html">&lt;p&gt;Neste post vou explicar um pouco de tudo o que eu sei sobre shell script. Eu comecei a usar shell script porque eu queria automatizar algumas tarefas minhas. E meu gosto pela linguagem começou pela minha fascinação. Eu lia alguns scripts, mas não entendia nada! Além disso eu percebia o potencial da linguagem, as coisas que eu poderia criar com aquilo.&lt;/p&gt;
&lt;p&gt;Shell script é uma linguagem com uma sintaxe extranhíssima e muito diferente de qualquer outra linguagem que eu conhecia antes. Eu tinha experiência com linguagens como Python, Java, um pouco de C e outras. E estudando shell script eu aprendi muita coisa que eu não conhecia, e que pode ser aplicado em outras linguagens. Então depois de estudar, sinto que conheço mais sobre programação de forma geral. Estudar shell script também me permitiu conhecer melhor como funciona a arquitetura de programas e processos do Linux. Antes disso, eu não sabia o que era &lt;code&gt;stdout&lt;/code&gt; e &lt;code&gt;stdin&lt;/code&gt; por exemplo. E hoje eu percebo que esse é um conhecimento bem útil e que eu não tinha antes.&lt;/p&gt;
&lt;p&gt;Apesar da sintaxe estranha, shell script é uma linguagem forte e capaz de muita coisa. Imagine o seguinte. Em seu computador você tem programas de todos os tipos. Alguns escritos em C, outros que foram escritos em Python, Java, Perl e etc. Agora imagine utilizar o poder de cada programa desses em coletivo para construir algo maior. É isso que você vai fazer. Usando shell script você irá orquestrar chamadas a esses programas, para cumprir um objetivo específico. Uau, isso é poderoso. É claro que você pode fazer isso em qualquer linguagem, mas shell script foi feito para isso!&lt;/p&gt;
&lt;p&gt;Se você se interessou até aqui, continue lendo. Garanto que você vai aprender algo interessante. Porém, antes de começar, algumas sugestões:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se você nunca aprendeu programação antes, te sugiro fortemente, e &lt;em&gt;enfáticamente&lt;/em&gt; que você não comece por shell script. Aprenda Python, C/C++, Java, PHP ou qualquer outra linguagem e depois volte aqui. Sério!&lt;/li&gt;
&lt;li&gt;E para seguir com o que eu vou explicar aqui, você deve estar um pouco acostumado a usar o terminal. Do contrário você vai ter um pouco de dificuldade.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Você irá perceber que muitas vezes eu vou ser breve e sucinto em certos assuntos. Principalmente aqueles que você provavelmente já viu em outras linguagens de programação. Outras vezes será porque não tive tempo de expandir e escrever da melhor forma possível. Se você perceber que eu não abordei algo importante, ou se algum dos exemplos está errado, ou se tem qualquer outra sugestão, por favor, deixe um comentário.&lt;/p&gt;
&lt;p&gt;Vamos começar.&lt;/p&gt;
&lt;h2 id=&quot;Sumario&quot;&gt;&lt;a href=&quot;#Sumario&quot; class=&quot;headerlink&quot; title=&quot;Sumário&quot;&gt;&lt;/a&gt;Sumário&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Diferentes-Shells&quot;&gt;Diferentes Shells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Hello-World&quot;&gt;Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#O-basico&quot;&gt;O básico&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Shebang&quot;&gt;Shebang (#!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Comandos-uteis&quot;&gt;Comandos úteis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Manuais&quot;&gt;Manuais&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Wildcards-Globs&quot;&gt;Wildcards (Globs)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Variaveis&quot;&gt;Variáveis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Substituicao-de-comandos&quot;&gt;Substituição de comandos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Condicionais&quot;&gt;Condicionais&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Switch-case&quot;&gt;Switch case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Loops&quot;&gt;Loops&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#For&quot;&gt;For&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#While&quot;&gt;While&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Argumentos&quot;&gt;Argumentos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Pipe-e-redirecao&quot;&gt;Pipe e redireção&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Funcoes&quot;&gt;Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Matematica&quot;&gt;Matemática&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Manipulacao-de-texto&quot;&gt;Manipulação de texto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Conclusao&quot;&gt;Conclusão&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Diferentes-Shells&quot;&gt;&lt;a href=&quot;#Diferentes-Shells&quot; class=&quot;headerlink&quot; title=&quot;Diferentes Shells&quot;&gt;&lt;/a&gt;Diferentes Shells&lt;/h2&gt;&lt;p&gt;Existem muitas &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shells&lt;/a&gt; diferentes. Muitas mesmo! E cada uma delas tem uma linguagem de script diferente. Apesar disso a maioria das Shells apresentam algum nível de compatibilidade com a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bourne_shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bourne Shell&lt;/a&gt; (&lt;code&gt;sh&lt;/code&gt;), que foi uma das primeiras a existir. Algumas das Shells mais usadas são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sh (&lt;a href=&quot;https://en.wikipedia.org/wiki/Bourne_shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bourne shell&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bash (&lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bourne-Again shell&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;dash (&lt;a href=&quot;https://en.wikipedia.org/wiki/Almquist_shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debian Almquist shell&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;fish (&lt;a href=&quot;https://en.wikipedia.org/wiki/Friendly_interactive_shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;friendly interactive shell&lt;/a&gt;. minha favorita)&lt;/li&gt;
&lt;li&gt;zsh (&lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Z shell&lt;/a&gt;. Muita gente gosta dessa para usar no dia-a-dia)&lt;/li&gt;
&lt;li&gt;ksh (&lt;a href=&quot;https://en.wikipedia.org/wiki/Korn_shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Korn shell&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;csh (&lt;a href=&quot;https://en.wikipedia.org/wiki/C_shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C shell&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;… ad infinitum.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A Shell mais popular provavelmente é o Bash. Se você usa Ubuntu e não sabe qual é a sua Shell, ela provavelmente é o Bash. Ainda assim, algumas pessoas preferem outras Shells para usar interativamente. Eu prefiro o Fish, por exemplo, e conheço muitas pessoas que preferem utilizar o Zsh.&lt;/p&gt;
&lt;p&gt;Apesar de todas as variações, a maioria delas possuem um subconjunto de operações e de sintáxe iguais ao do &lt;code&gt;sh&lt;/code&gt;. Por isso vou ensinar &lt;code&gt;sh&lt;/code&gt; puro aqui. Variações como o &lt;code&gt;bash&lt;/code&gt; adicionam algumas coisas legais à linguagem, mas que não são compatíveis com as outras shells. Se você se restringir a &lt;code&gt;sh&lt;/code&gt; puro, seu código vai funcionar na maioria das outras shells. (Não todas. O &lt;code&gt;fish&lt;/code&gt;, por exemplo, não é compatível. Já sofri muito com isso. T.T)&lt;/p&gt;
&lt;p&gt;No Ubuntu, quando você usa o &lt;code&gt;sh&lt;/code&gt;, na verdade você está usando o &lt;code&gt;dash&lt;/code&gt;. Mas… Whatever. O &lt;code&gt;dash&lt;/code&gt; foi feito apenas para ser um versão mais rápida e leve da Bourne Shell, e é totalmente compatível com a Bourne shell (até onde eu sei).&lt;/p&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h2&gt;&lt;p&gt;Se você nunca mexeu com shell script antes, me acompanhe para fazer um Hello World. Abra o terminal (&lt;code&gt;Ctrl+Shift+T&lt;/code&gt;), e use seu editor de texto favorito para criar um novo arquivo arquivo de texto. Aqui eu vou usar o &lt;code&gt;nano&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ nano script.sh  &lt;span class=&quot;comment&quot;&gt;# Nano é um editor de texto, use qualquer um que você prefira&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Usando seu editor de texto, digite o seguinte código:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Hello World&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A primeira linha é um shebang (&lt;code&gt;#!&lt;/code&gt;) e identifica o tipo de script que estamos criando, vou explicar melhor sobre o shebang depois. E na segunda linha, &lt;code&gt;echo&lt;/code&gt; irá imprimir “Hello World”. Agora, salve e feche o editor de texto. (No &lt;code&gt;nano&lt;/code&gt; você usa &lt;code&gt;Ctrl+O&lt;/code&gt; (letra Ó) para salvar, e &lt;code&gt;Ctrl+X&lt;/code&gt; para sair.) Depois, digite o comando seguinte no mesmo terminal e você verá o &lt;code&gt;Hello World&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sh script.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Voilà&lt;/em&gt;! Agora você já sabe como criar e executar um shell script. Você já pode pegar seu certificado de “Shell Script Noob” na recepção e ir embora, ou continuar com o resto do guia para ganhar o certificado de “Shell Script Master”. ;)&lt;/p&gt;
&lt;h2 id=&quot;O-basico&quot;&gt;&lt;a href=&quot;#O-basico&quot; class=&quot;headerlink&quot; title=&quot;O básico&quot;&gt;&lt;/a&gt;O básico&lt;/h2&gt;&lt;p&gt;No seu uso mais básico, shell script é usado para executar um comando após o outro. Igual que você estivesse usando o terminal, e digitando um comando após o outro. Mas colocando esses comandos em um script, você pode automatizar suas tarefas.&lt;/p&gt;
&lt;p&gt;Por exemplo, depois de formatar meu computador eu tenho &lt;a href=&quot;https://github.com/possatti/my-setup-scripts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vários scripts&lt;/a&gt; que instalam algumas coisas que eu costumo usar no dia-a-dia, exemplo:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install python-pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install fish&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install guake&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install htop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install transmission&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install texlive-latex-base&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Quando eu executar o script acima, todos esses programas serão instalados pelo &lt;code&gt;apt-get&lt;/code&gt;. Isso me poupa o trabalho de ter que me lembrar e de ter que digitar manualmente cada um desses comandos.&lt;/p&gt;
&lt;p&gt;Você também pode executar mais de um comando na mesma linha, separando os comandos por &lt;code&gt;;&lt;/code&gt;. O &lt;code&gt;;&lt;/code&gt; é opcional no final de uma linha.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;World&quot;&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;E a indentação também não importa.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Mas, por favor, indente seu código de forma intuitiva e organizada. Não é só porque você está usando a linguagem mais feia já inventada que você precisa escrever o código mais feio já inventado.&lt;/p&gt;
&lt;h3 id=&quot;Shebang&quot;&gt;&lt;a href=&quot;#Shebang&quot; class=&quot;headerlink&quot; title=&quot;Shebang (#!)&quot;&gt;&lt;/a&gt;Shebang (#!)&lt;/h3&gt;&lt;p&gt;No linux, é muito comum você colocar um &lt;a href=&quot;https://pt.wikipedia.org/wiki/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; (&lt;code&gt;#!&lt;/code&gt;) na primeira linha de um script. Ele serve para que seu computador identifique qual programa roda aquele script. Ele só funciona se for a primeira linha do arquivo. Aqui estão alguns exemplos:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#!/usr/bin/ruby&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#!/usr/bin/perl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Agora você já percebeu que ele toma o formato &lt;code&gt;#!&lt;/code&gt; + &lt;code&gt;&amp;lt;executável&amp;gt;&lt;/code&gt;. Sendo que o executável é o programa que vai rodar o seu script. Se você não colocar um shebang no seu script, você vai precisar de executar ele da seguinte forma:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sh script.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Se você colocar o devido shebang você pode fazer:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ chmod +x script.sh &lt;span class=&quot;comment&quot;&gt;# Apenas da primeira vez, para transformar o arquivo em executável&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./script.sh &lt;span class=&quot;comment&quot;&gt;# Se você estiver no mesmo diretório que o script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ script.sh &lt;span class=&quot;comment&quot;&gt;# Se o script estiver no seu $PATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Eu costumo colocar o shebang e rodar o script com &lt;code&gt;sh script.sh&lt;/code&gt; mesmo, porque ficar fazendo &lt;code&gt;chmod +x&lt;/code&gt; para cada script que eu crio é muito enjoado. Mas é uma boa prática colocar o shebang, então não deixe de colocar.&lt;/p&gt;
&lt;h3 id=&quot;Comandos-uteis&quot;&gt;&lt;a href=&quot;#Comandos-uteis&quot; class=&quot;headerlink&quot; title=&quot;Comandos úteis&quot;&gt;&lt;/a&gt;Comandos úteis&lt;/h3&gt;&lt;p&gt;Alguns comandos você irá usar com mais frequência do que outros. É importante que você saiba que alguns deles existam, para consultá-los quando você precisar. Alguns deles são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt;: Lista os arquivos do diretório atual.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt;: Troca o diretório atual.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm&lt;/code&gt;: Apaga um arquivo ou diretório.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mv&lt;/code&gt;: Move um arquivo ou diretório.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp&lt;/code&gt;: Copia um arquivo ou diretório.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo&lt;/code&gt;: Escreve um texto na tela.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;: Veremos na parte de condicionais.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep&lt;/code&gt;: Imprime linhas que correspondem à um padrão.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed&lt;/code&gt;: Modifica e filtra texto.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tr&lt;/code&gt;: Troca ou deleta caracteres.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;: Lê um texto digitado pelo usuário e salva numa variável.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pwd&lt;/code&gt;: Imprime o diretório local.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt;: Busca arquivos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Manuais&quot;&gt;&lt;a href=&quot;#Manuais&quot; class=&quot;headerlink&quot; title=&quot;Manuais&quot;&gt;&lt;/a&gt;Manuais&lt;/h3&gt;&lt;p&gt;Quando você tiver dúvida sobre como um comando funciona, ou qual a sua interface, você deveria consultar sua página no manual: &lt;code&gt;man &amp;lt;comando&amp;gt;&lt;/code&gt;. Por exemplo, estou com dúvida no &lt;code&gt;ls&lt;/code&gt;, então eu digito &lt;code&gt;man ls&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Você deve se acostumar a ler os manuais&lt;/strong&gt;. Acostume-se a encontrar os subcomandos existentes e as opções (e.g. &lt;code&gt;--opcao&lt;/code&gt;) que você precisa. E busque compreender mais ou menos a seção &lt;code&gt;SYNOPSIS&lt;/code&gt; das páginas dos manuais.&lt;/p&gt;
&lt;p&gt;E tenha em mente que as páginas dos manuais podem ser diferentes dependendo da shell que você está usando. A maioria dos programas é a mesma coisa, porém alguns comandos como &lt;code&gt;read&lt;/code&gt;, por exemplo, podem funcionar um pouco diferente dependendo da Shell. Eu uso o &lt;code&gt;fish&lt;/code&gt; diáriamente, e, quando estou fazendo um script, vez ou outra, tenho que entrar no &lt;code&gt;bash&lt;/code&gt; só para consultar o manual de algum comando. Isso já me deu dor de cabeça algumas vezes. Se você usa o &lt;code&gt;bash&lt;/code&gt;, você não deve ter muitos problemas com isso, mas fica esperto.&lt;/p&gt;
&lt;h3 id=&quot;Wildcards-Globs&quot;&gt;&lt;a href=&quot;#Wildcards-Globs&quot; class=&quot;headerlink&quot; title=&quot;Wildcards (Globs)&quot;&gt;&lt;/a&gt;Wildcards (Globs)&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Glob_%28programming%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Globs&lt;/em&gt;&lt;/a&gt; são um tipo de &lt;a href=&quot;https://en.wikipedia.org/wiki/Wildcard_character&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Wildcard&lt;/em&gt;&lt;/a&gt;, e são usados para selecionar arquivos em sistemas Unix. São caracteres que representam uma sequência genérica de caracteres. &lt;code&gt;?&lt;/code&gt; representa qualquer caractere. E &lt;code&gt;*&lt;/code&gt;, qualquer quantidade de qualquer caractere.&lt;/p&gt;
&lt;p&gt;Vamos supor que você tem um diretório com os seguintes arquivos: &lt;code&gt;script.pl&lt;/code&gt;, &lt;code&gt;script.sh&lt;/code&gt;, &lt;code&gt;script.pl&lt;/code&gt;, &lt;code&gt;script.test.sh&lt;/code&gt;, &lt;code&gt;test.c&lt;/code&gt; e &lt;code&gt;test.java&lt;/code&gt;. Se você entrar nesse diretório e usar o comando &lt;code&gt;rm test.*&lt;/code&gt;, você irá remover os arquivos &lt;code&gt;test.c&lt;/code&gt; e &lt;code&gt;test.java&lt;/code&gt;, mas os outros arquivos ficarão intactos.&lt;/p&gt;
&lt;p&gt;Isso funciona por uma expansão que ocorre antes mesmo do programa ser executado. No caso anterior, &lt;code&gt;rm test.*&lt;/code&gt; será expandido para &lt;code&gt;rm test.c test.java&lt;/code&gt;, e então o programa é invocado com estes dois argumentos.&lt;/p&gt;
&lt;p&gt;Outro exemplo. Se usamos o comando &lt;code&gt;mv *.txt textfiles/&lt;/code&gt; moveremos todos os arquivos com a extensão &lt;code&gt;.txt&lt;/code&gt; para o diretório &lt;code&gt;textfiles/&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rm script.*  &lt;span class=&quot;comment&quot;&gt;# Apaga arquivos tipo: &#39;script.py&#39;, &#39;script.sh&#39;, &#39;script.pl&#39;, e etc.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm &lt;span class=&quot;string&quot;&gt;&quot;script.*&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Globs não funcionam dentro de aspas.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm &lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/fotos/viagem/*-2015-01-??.jpg  &lt;span class=&quot;comment&quot;&gt;# Remove as fotos de janeiro de 2015.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm &lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/fotos/viagem/*.jpg  &lt;span class=&quot;comment&quot;&gt;# Remove todas as fotos da viagem.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Globs&lt;/em&gt; são muito úteis, e você deveria aprender a usar bem, pelo menos, o &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Variaveis&quot;&gt;&lt;a href=&quot;#Variaveis&quot; class=&quot;headerlink&quot; title=&quot;Variáveis&quot;&gt;&lt;/a&gt;Variáveis&lt;/h2&gt;&lt;p&gt;Chega daquelas discussões sobre o que é melhor: tipagem forte, ou tipagem fraca. Ao contrário da maioria das linguagens de programação, em que você tem vários tipos de variáveis (integer, string, boolean, etc), em shell script você tem apenas um tipo de variável… Strings!&lt;/p&gt;
&lt;p&gt;Criar uma variável é bem simples:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;variavel=&lt;span class=&quot;string&quot;&gt;&quot;Conteúdo da variável&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; não coloque espaços ao redor do &lt;code&gt;=&lt;/code&gt;; não comece com números; não use hífen &lt;code&gt;-&lt;/code&gt;; não use caracteres especiais como &lt;code&gt;ç&lt;/code&gt;, &lt;code&gt;á&lt;/code&gt;, &lt;code&gt;火災&lt;/code&gt; e nem emojis &lt;code&gt;😀&lt;/code&gt;, &lt;code&gt;😂&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Não use nomes que nem esses:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98bottles=&lt;span class=&quot;string&quot;&gt;&quot;98&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Não comece com números.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bad-variable=&lt;span class=&quot;string&quot;&gt;&quot;crap&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Não use hífen &#39;-&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;erro = &lt;span class=&quot;string&quot;&gt;&quot;erro&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Não coloque espaços ao redor do &#39;=&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;maçã=&lt;span class=&quot;string&quot;&gt;&quot;maca&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Não use caracteres especiais nos nomes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Use nomes que nem esses:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bottles_n_98=98  &lt;span class=&quot;comment&quot;&gt;# As aspas são opcionais quando o conteúdo da variável não contém espaços.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;good_variable=&lt;span class=&quot;string&quot;&gt;&quot;(y)&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Use underline &#39;_&#39; como alternativa para o hífen &#39;-&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CamelCase=&lt;span class=&quot;string&quot;&gt;&quot;Camelo&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Mau gosto, porém é permitido.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;maca=maçã-火災-😀  &lt;span class=&quot;comment&quot;&gt;# No conteúdo você pode usar caracteres especiais. 👍&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Agora, na hora de usar as variáveis é que tem uma pegadinha. Você deve usar &lt;code&gt;$&lt;/code&gt; para acessar o valor de qualquer variável. Então a variável &lt;code&gt;fruta=maçã&lt;/code&gt; deve ser acessada como &lt;code&gt;$fruta&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;texto=&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; texto  &lt;span class=&quot;comment&quot;&gt;# Pegadinha. Vai imprimir &quot;texto&quot;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$texto&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Vai imprimir &quot;Hello World&quot;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Quando você estiver escrevendo strings, você pode usar &lt;code&gt;&amp;#39;&lt;/code&gt; ou &lt;code&gt;&amp;quot;&lt;/code&gt;. Usando &lt;code&gt;&amp;quot;&lt;/code&gt; o valor das variáveis são colocados no lugar dos seus nomes. Usando &lt;code&gt;&amp;#39;&lt;/code&gt; o nome dá variável fica do jeito que está na string. O &lt;code&gt;&amp;#39;&lt;/code&gt; ignora a existência de variáveis.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;$HOME&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime: $HOME&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime, ex: /home/possatti&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;A home do usuário &#39;&lt;span class=&quot;variable&quot;&gt;$USER&lt;/span&gt;&#39; é &#39;&lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;&#39;&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# ex: A home do usuário &#39;possatti&#39; é &#39;/home/possatti&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Para ler uma variável do &lt;code&gt;stdin&lt;/code&gt; (mais tarde eu explico sobre &lt;em&gt;File Descriptors&lt;/em&gt;), ou seja, algum valor que o usuário tenha digitado, use o comando &lt;code&gt;read&lt;/code&gt;. Exemplo:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;Digite seu nome: &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; nome&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Olá, &lt;span class=&quot;variable&quot;&gt;$nome&lt;/span&gt;!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Além das variáveis que você cria dentro do script, já existem algumas prontas para você usar. Nós chamamos elas de variáveis de ambiente (environment variables). Você pode abrir um terminal, digitar &lt;code&gt;$&lt;/code&gt; e apertar tab duas vezes, e uma lista de variáveis vai aparecer para você. Algumas das mais úteis são: &lt;code&gt;$HOME&lt;/code&gt;, &lt;code&gt;$HOSTNAME&lt;/code&gt;, &lt;code&gt;$LANG&lt;/code&gt;, &lt;code&gt;$RANDOM&lt;/code&gt;, &lt;code&gt;$PWD&lt;/code&gt;, &lt;code&gt;$PATH&lt;/code&gt;, &lt;code&gt;$SHELL&lt;/code&gt;, &lt;code&gt;$USER&lt;/code&gt;, &lt;code&gt;$USERNAME&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Você também pode passar variáveis de ambiente temporárias para um script, invocando ele como &lt;code&gt;VARIAVEL1=whatever VARIAVEL2=whatever ./script.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Também é uma convenção usar nomes de variáveis em letras maiúsculas. E geralmente é uma ótima ideia seguir as convenções. Mas você vai perceber que eu não tô nem aí pra essa convenção especificamente… kkk. Isso porque eu acho que escrever o nome das minhas variáveis em minúsculo diferencia elas melhor das variáveis de ambiente.&lt;/p&gt;
&lt;h2 id=&quot;Substituicao-de-comandos&quot;&gt;&lt;a href=&quot;#Substituicao-de-comandos&quot; class=&quot;headerlink&quot; title=&quot;Substituição de comandos&quot;&gt;&lt;/a&gt;Substituição de comandos&lt;/h2&gt;&lt;p&gt;As vezes é útil guardarmos a saída de algum programa. Ao invés de imprimir na tela, gostaríamos de pegar esse valor e, por exemplo, guardar em uma variável. Para isso, usamos &lt;a href=&quot;https://en.wikipedia.org/wiki/Command_substitution&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;substituição de comandos&lt;/a&gt;: &lt;code&gt;$(prog)&lt;/code&gt;, ou &lt;code&gt;&amp;#x0060;prog&amp;#x0060;&lt;/code&gt;. Até onde eu sei, não há diferença entre as duas formas. Eu, particularmente, prefiro o segundo.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; `&lt;span class=&quot;built_in&quot;&gt;pwd&lt;/span&gt;`  &lt;span class=&quot;comment&quot;&gt;# Imprime o diretório atual&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; $(&lt;span class=&quot;built_in&quot;&gt;pwd&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# Imprime o diretório atual&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arquivos_de_texto=$(ls *.txt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$arquivos_de_texto&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime todos os &quot;txt&quot; do diretório atual&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2 + 2 = &lt;span class=&quot;variable&quot;&gt;$(expr 2 + 2)&lt;/span&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime &#39;2 + 2 = 4&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Condicionais&quot;&gt;&lt;a href=&quot;#Condicionais&quot; class=&quot;headerlink&quot; title=&quot;Condicionais&quot;&gt;&lt;/a&gt;Condicionais&lt;/h2&gt;&lt;p&gt;Esse é o &lt;code&gt;if&lt;/code&gt; mais feio que você provavelmente vai escrever na sua vida. Mas vamos nessa.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;Digite sua idade: &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; idade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;variable&quot;&gt;$idade&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-lt&lt;/span&gt; 18 ]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Você é menor de idade.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Você é maior de idade.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Eu avisei.&lt;/p&gt;
&lt;p&gt;No script acima, o usuário digita sua idade. Se ele tiver menos que 18 anos, imprimimos que ele é menor de idade. Caso contrário, imprimimos que ele é maior de idade.&lt;/p&gt;
&lt;p&gt;Note que os espaços entre &lt;code&gt;[&lt;/code&gt; e &lt;code&gt;]&lt;/code&gt; são necessários. &lt;strong&gt;Não&lt;/strong&gt; use &lt;code&gt;[$idade -lt 18]&lt;/code&gt;, use &lt;code&gt;[ $idade -lt 18 ]&lt;/code&gt;. Se você não colocar os espaços, você terá um erro.&lt;/p&gt;
&lt;p&gt;Agora vamos olhar como esse &lt;code&gt;if&lt;/code&gt; funciona de verdade. Na Bourne Shell, quando escrevemos &lt;code&gt;[ $idade -lt 18 ]&lt;/code&gt;, isso é a mesma coisa que &lt;code&gt;test $idade -lt 18&lt;/code&gt;. Na verdade, verdade verdadeira, ele usa um comando para avaliar a nossa expressão. Os valores &lt;code&gt;$idade&lt;/code&gt;, &lt;code&gt;-lt&lt;/code&gt; e &lt;code&gt;18&lt;/code&gt; estão sendo passados como argumentos para o programa &lt;code&gt;test&lt;/code&gt;, e ele vai avaliar a expressão. Se a expressão for verdadeira, &lt;code&gt;test&lt;/code&gt; termina a execução com o valor &lt;code&gt;0&lt;/code&gt; (&lt;code&gt;exit 0&lt;/code&gt;). Se a expressão for falsa, ele termina com um valor diferente (geralmente &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Agora que você já sabe que o comando &lt;code&gt;test&lt;/code&gt; está sendo usado, você já pode consultar o manual para saber que tipos de condições você pode construir: &lt;code&gt;man test&lt;/code&gt;. O &lt;code&gt;test&lt;/code&gt; pode realizar vários tipos de comparações, aqui estão algumas operações possíveis.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; 42 &lt;span class=&quot;_&quot;&gt;-eq&lt;/span&gt; 42 &lt;span class=&quot;comment&quot;&gt;# eq: equal = os inteiros são iguais&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; 3 &lt;span class=&quot;_&quot;&gt;-gt&lt;/span&gt; 2 &lt;span class=&quot;comment&quot;&gt;# gt: greater-than = maior-quê&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; 3 -ge 2 &lt;span class=&quot;comment&quot;&gt;# ge: greater-than or equal = maior ou igual&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; 2 &lt;span class=&quot;_&quot;&gt;-lt&lt;/span&gt; 3 &lt;span class=&quot;comment&quot;&gt;# lt: less-than = menor-quê&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; 2 -le 3 &lt;span class=&quot;comment&quot;&gt;# le: less-than or equal = menor ou igual&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; 0 &lt;span class=&quot;_&quot;&gt;-ne&lt;/span&gt; 1 &lt;span class=&quot;comment&quot;&gt;# ne: not-equal = os inteiros não são iguais&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;Texto&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# n: String tem mais que zero caracteres&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -z &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# z: String tem zero carácteres&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Goiaba&quot;&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;Goiaba&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# ==: As Strings são iguais&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Goiaba&quot;&lt;/span&gt; != &lt;span class=&quot;string&quot;&gt;&quot;Mamão&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# ==: As Strings são diferentes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/home&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Verifica se o diretório existe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; saci-pererê.txt  &lt;span class=&quot;comment&quot;&gt;# f: Arquivo existe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Podemos reescrever o condicional do código anterior usando o &lt;code&gt;test&lt;/code&gt; explicitamente. Dá na mesma coisa:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$idade&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-lt&lt;/span&gt; 18; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Você é menor de idade.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Você é maior de idade.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Todo comando que é executado retorna algum valor. Se tudo ocorreu bem, retorna &lt;code&gt;0&lt;/code&gt;. Se deu algum erro, retorna &lt;code&gt;1&lt;/code&gt; ou outro valor. Em shell script, &lt;code&gt;0&lt;/code&gt; significa verdadeiro, e os outros valores significam falso. E como eu disse, todo comando retorna um valor para a shell, inclusive o seu script! Você usa &lt;code&gt;exit&lt;/code&gt; para especificar que valor deve ser retornado. Se você não especificar, o retorno do último comando do seu script será usado.&lt;/p&gt;
&lt;p&gt;E existe uma variável especial, chamada &lt;code&gt;$?&lt;/code&gt; que guarda o retorno do último comando executado. Pode ser útil, às vezes.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; rm saci-pererê.txt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Saci foi apagado.&quot;&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; saci-pererê.txt  &lt;span class=&quot;comment&quot;&gt;# Testa se o arquivo existe.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ $? &lt;span class=&quot;_&quot;&gt;-eq&lt;/span&gt; 0 ]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# O valor do comando anterior (test) entra no lugar de &#39;$?&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Saci ainda existe!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; 1  &lt;span class=&quot;comment&quot;&gt;# Saímos com erro, porque o Saci não devia mais existir.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; 0  &lt;span class=&quot;comment&quot;&gt;# Saci deixou de existir. Sucesso!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Switch-case&quot;&gt;&lt;a href=&quot;#Switch-case&quot; class=&quot;headerlink&quot; title=&quot;Switch case&quot;&gt;&lt;/a&gt;Switch case&lt;/h2&gt;&lt;p&gt;Outra estrutura com uma sintaxe curiosa. Se você achava o &lt;code&gt;if&lt;/code&gt; estranho, é melhor se sentar. Surpreendentemente ele é mais útil do que parece, pela forma como ele trata as strings. Você pode usar wildcards (&lt;code&gt;*&lt;/code&gt; e &lt;code&gt;?&lt;/code&gt;) para enriquecer as expressões usadas no switch.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;Em que planeta você mora? &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; planeta&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$planeta&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;terra&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Você é terráqueo.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;marte&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Você é marciano.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Você é um lixo das galáxias! Sorry...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;esac&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# &quot;case&quot; ao contrário para fechar o switch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Repare que você fecha o &lt;code&gt;case&lt;/code&gt; usando &lt;code&gt;esac&lt;/code&gt; (&lt;code&gt;case&lt;/code&gt; ao contrário). E não me pergunte porquê você tem que colocar &lt;code&gt;;;&lt;/code&gt; no final de cada caso! Deixo isso como um dever de casa para você. Boa sorte.&lt;/p&gt;
&lt;h2 id=&quot;Loops&quot;&gt;&lt;a href=&quot;#Loops&quot; class=&quot;headerlink&quot; title=&quot;Loops&quot;&gt;&lt;/a&gt;Loops&lt;/h2&gt;&lt;p&gt;Temos duas opções de loop aqui: &lt;code&gt;while&lt;/code&gt; e &lt;code&gt;for&lt;/code&gt;. Cada um é útil em uma situação específica.&lt;/p&gt;
&lt;h3 id=&quot;For&quot;&gt;&lt;a href=&quot;#For&quot; class=&quot;headerlink&quot; title=&quot;For&quot;&gt;&lt;/a&gt;For&lt;/h3&gt;&lt;p&gt;Na sua forma mais simples, você descrimina uma série de valores para o &lt;code&gt;for&lt;/code&gt;, e a iteração acontecerá em cima desses valores. Veja o exemplo abaixo:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# O script irá imprimir &#39;goiaba&#39;, &#39;abacaxi&#39;, e &#39;banana&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# cada um em uma linha separada.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; fruta &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; goiaba abacaxi banana; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$fruta&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Abaixo está um exemplo levemente mais útil. O script apagará todos os arquivos do diretório atual, exceto o arquivo &lt;code&gt;critico.txt&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Pega todos os &quot;txt&quot; do diretório local.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arquivos_txt=`ls *.txt`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; arquivo &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$arquivos_txt&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;variable&quot;&gt;$arquivo&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;critico.txt&quot;&lt;/span&gt; ]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;continue&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Pula &#39;critico.txt&#39; para que ele não seja apagado&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rm &lt;span class=&quot;variable&quot;&gt;$arquivo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A variável &lt;code&gt;$arquivos_txt&lt;/code&gt; é uma string que contém o nome de todos os arquivos &lt;code&gt;.txt&lt;/code&gt; do diretório atual, separados por espaço. O &lt;code&gt;for&lt;/code&gt; irá quebrar essa string em múltiplos pedaços, separando pelos espaços e pelas quebras de linha (&lt;code&gt;\n&lt;/code&gt;). Esses múltiplos pedaços serão passados para a variável &lt;code&gt;$arquivo&lt;/code&gt;, um de cada vez.&lt;/p&gt;
&lt;p&gt;Você também pode usar as palavras chaves &lt;code&gt;continue&lt;/code&gt; para pular uma iteração e continuar do começo, e &lt;code&gt;break&lt;/code&gt; para sair do loop.&lt;/p&gt;
&lt;p&gt;Quando você desejar iterar sob uma sequência de números, você pode usar o comando &lt;code&gt;seq&lt;/code&gt;. Exemplo: &lt;code&gt;seq 3&lt;/code&gt; irá imprimir &lt;code&gt;1 2 3&lt;/code&gt; (separados por &lt;code&gt;\n&lt;/code&gt;, na verdade) e &lt;code&gt;seq 0 3&lt;/code&gt; irá imprimir &lt;code&gt;0 1 2 3&lt;/code&gt;. No exemplo abaixo, nós criamos uma sequência de 0 à 10, e elevamos cada um dos números ao quadrado, e imprimimos.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; $(seq 0 10); &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i_quadrado=$(expr &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt; ao quadrado é igual a: &lt;span class=&quot;variable&quot;&gt;$i_quadrado&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;While&quot;&gt;&lt;a href=&quot;#While&quot; class=&quot;headerlink&quot; title=&quot;While&quot;&gt;&lt;/a&gt;While&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Observação: Fazer um loop para vigiar se um arquivo foi criado&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# é uma das piores coisas que você pode fazer durante sua existência&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# na terra. Isso vai usar todo o seu processador. Não faça isso! É&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# só um exemplo.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; [ ! &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; saci-pererê.txt ]; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Enquanto o arquivo *não* existe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Vigiando o Saci ser criado.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Alguém criou o Saci!! Apaga o Saci!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm saci-pererê.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;No exemplo, nós constantemente verificamos se o arquivo &lt;code&gt;saci-pererê.txt&lt;/code&gt; existe. Enquanto o arquivo não existir, nós continuamos no loop imprimindo uma mensagem. Assim que o arquivo é criado, o loop termina, e nós apagamos o arquivo do Saci.&lt;/p&gt;
&lt;p&gt;Se você quiser trollar um amigo que usa Ubuntu, execute o script seguinte no computador dele. Coloque o arquivo em sua &lt;code&gt;$HOME&lt;/code&gt; com o nome de &lt;code&gt;dull-boy.sh&lt;/code&gt; (o nome é importante).&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Número de ciclos do while para criar uma nova instância&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# do gnome-terminal.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ciclos_para_nova_instancia=1000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ciclos=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;All work and no play makes Jack a dull boy&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# Incrementa o número de ciclos.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ciclos=`expr &lt;span class=&quot;variable&quot;&gt;$ciclos&lt;/span&gt; + 1`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# Verifica se chegou o momento de criar uma nova instância.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$ciclos&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$ciclos_para_nova_instancia&lt;/span&gt;&quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;# Cria uma nova instância do gnome-terminal, executando o mesmo script.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		gnome-terminal -x sh dull-boy.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;# Reinicia a contagem dos ciclos.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ciclos=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;O script irá imprimir &lt;code&gt;&amp;quot;All work and no play makes Jack a dull boy&amp;quot;&lt;/code&gt; indeterminadamente. E a cada mil iterações, irá instanciar um novo terminal executando o mesmo script. Então seguindo uma curva exponencial, em pouco tempo você terá dezenas ou centenas de terminais na tela, todos imprimindo &lt;code&gt;&amp;quot;All work and no play makes Jack a dull boy&amp;quot;&lt;/code&gt; ininterruptamente.&lt;/p&gt;
&lt;p&gt;Você pode tentar parar cada script com &lt;code&gt;Ctrl+C&lt;/code&gt;. Porém chega uma hora que a única solução razoável é esperar que o sistema operacional congele os processos, ou, mais fácil, reiniciar o computador.&lt;/p&gt;
&lt;p&gt;Se você quiser trollar seu amigo em dobro, coloque uma linha &lt;code&gt;cd $HOME; sh dull-boy.sh&lt;/code&gt; no final do arquivo &lt;code&gt;.bashrc&lt;/code&gt; (se ele usa o Bash), assim o script irá executar toda vez que ele abrir o terminal. Mas cuidado, pois você pode não ter um amigo depois disso.&lt;/p&gt;
&lt;h2 id=&quot;Argumentos&quot;&gt;&lt;a href=&quot;#Argumentos&quot; class=&quot;headerlink&quot; title=&quot;Argumentos&quot;&gt;&lt;/a&gt;Argumentos&lt;/h2&gt;&lt;p&gt;A maioria dos programas de linha de comando recebem e processam argumentos que são passados pelo usuário que está invocando o programa.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ comando arg1 arg2 arg3 arg4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;E para acessarmos os argumentos, usamos as variáveis &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt; e etc para acessarmos o primeiro argumento, o segundo argumento e daí em diante. &lt;code&gt;$0&lt;/code&gt; é o nome do seu script (até que faz sentido, né?). E &lt;code&gt;$@&lt;/code&gt; representa todos os argumentos juntos e em sequência (sem o &lt;code&gt;$0&lt;/code&gt;). E &lt;code&gt;$#&lt;/code&gt; é o número de argumentos recebidos (também sem o &lt;code&gt;$0&lt;/code&gt;).&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\$0: &lt;span class=&quot;variable&quot;&gt;$0&lt;/span&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime o nome do script.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\$@: &lt;span class=&quot;variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime todos os argumentos.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\$#: &lt;span class=&quot;variable&quot;&gt;$#&lt;/span&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime o número de argumentos.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\$1 \$2 \$3: &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$3&lt;/span&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime os primeiros três argumentos.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Se o seu script tiver recebido apenas dois argumentos e você tentar acessar, digamos, o argumento &lt;code&gt;$3&lt;/code&gt;, o &lt;code&gt;$3&lt;/code&gt; será substituído por uma string vazia. Para evitar isso, você pode testar se &lt;code&gt;$3&lt;/code&gt; não é uma string vazia: &lt;code&gt;test -n &amp;quot;$3&amp;quot;&lt;/code&gt; (as aspas são importantes nesse caso).&lt;/p&gt;
&lt;p&gt;Quando um argumento tem a forma &lt;code&gt;-e&lt;/code&gt; ou &lt;code&gt;--exemplo&lt;/code&gt;, ele é chamado de uma opção, e geralmente é… opcional na chamada de um programa. Você usou opções este tempo inteiro (&lt;code&gt;echo -n&lt;/code&gt;, &lt;code&gt;rm -rf&lt;/code&gt;, etc), deve saber como elas funcionam. Mas só para o caso de você não saber, vou explicar um pouquinho.&lt;/p&gt;
&lt;p&gt;Algumas opções são chamadas de forma isolada, como &lt;code&gt;--quiet&lt;/code&gt;, e &lt;code&gt;--help&lt;/code&gt;, e outras devem ser acompanhadas de um valor como: &lt;code&gt;--garrafas=12&lt;/code&gt;, &lt;code&gt;--garrafas 12&lt;/code&gt;, &lt;code&gt;-g12&lt;/code&gt;. Ou: &lt;code&gt;--arquivo=&amp;quot;file.txt&amp;quot;&lt;/code&gt;, &lt;code&gt;--arquivo &amp;quot;file.txt&amp;quot;&lt;/code&gt;. As opções podem ser usadas, não importa a ordem: &lt;code&gt;cmd --input &amp;quot;i.txt&amp;quot; --output &amp;quot;o.txt&amp;quot;&lt;/code&gt; deveria ser a mesma coisa que &lt;code&gt;cmd --output &amp;quot;o.txt&amp;quot; --input &amp;quot;i.txt&amp;quot;&lt;/code&gt;. E as opções geralmente são misturadas com argumentos: &lt;code&gt;echo &amp;quot;hello&amp;quot; -n&lt;/code&gt; (&lt;code&gt;n&lt;/code&gt; é uma opção e &lt;code&gt;&amp;quot;hello&amp;quot;&lt;/code&gt;, um argumento). E muitas opções que são escritas por extenso também tem uma forma abreviada, como: &lt;code&gt;--help&lt;/code&gt; é equivalente à &lt;code&gt;-h&lt;/code&gt;; e &lt;code&gt;--quiet&lt;/code&gt; é equivalente à &lt;code&gt;-q&lt;/code&gt;. Quando você usa a forma abreviada, muitas vezes você também pode aglutinar as formas abreviadas, por exemplo &lt;code&gt;rm -rf&lt;/code&gt; é equivalente à &lt;code&gt;rm -r -f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;É claro que nem todos os programas vão seguir essas regras para suas interfaces, mas essas são regras que você vai observar na maioria dos programas de linha de comando. Existem exceções, como exemplo, o programa &lt;code&gt;java&lt;/code&gt; não têm opções abreviadas e as opções extensas usam um único hífen, tipo: &lt;code&gt;java -version&lt;/code&gt; ou &lt;code&gt;java -help&lt;/code&gt;. (Para o caso de dúvida, programas feitos em Java podem ter qualquer interface que eles quiserem. Eu só quis dizer que o executável &lt;code&gt;java&lt;/code&gt; funciona dessa forma.)&lt;/p&gt;
&lt;p&gt;E repare que apesar de &lt;code&gt;--arquivo &amp;quot;file.txt&amp;quot;&lt;/code&gt; ser uma única opção, na shell eles são visto como dois argumentos separados. Shell script não diferencia argumentos de opções por você. Para o shell script, tudo é argumento.&lt;/p&gt;
&lt;p&gt;Se você quiser iterar sobre todos os argumentos, você pode usar um &lt;code&gt;for&lt;/code&gt; para isso:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; arg &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$@&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Argumento &lt;span class=&quot;variable&quot;&gt;$arg&lt;/span&gt;.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Outra opção semelhante é usar o comando &lt;code&gt;shift&lt;/code&gt; juntamente com um &lt;code&gt;while&lt;/code&gt;. Quando você usa &lt;code&gt;shift&lt;/code&gt;, o &lt;code&gt;$2&lt;/code&gt; será colocado no lugar do &lt;code&gt;$1&lt;/code&gt;; o &lt;code&gt;$3&lt;/code&gt; no lugar do &lt;code&gt;$2&lt;/code&gt;; e assim em diante. Dessa forma você pode ler o primeiro argumento através do &lt;code&gt;$1&lt;/code&gt;; fazer um &lt;code&gt;shift&lt;/code&gt;, ler o segundo argumento através do &lt;code&gt;$1&lt;/code&gt;; &lt;code&gt;shift&lt;/code&gt;, ler terceiro argumento através do &lt;code&gt;$1&lt;/code&gt; também; e etc.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Irá imprimir &quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;, etc.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; [ -n &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; ]; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Argumento &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;shift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Se você for criar um script que tenha uma interface extensa e complexa, e que precisa diferenciar e tratar argumentos e opções, você terá que usar altos recursos &lt;em&gt;imaginísticos&lt;/em&gt; para alcançar seus objetivos. Há algum tempo atrás eu tive que fazer isso, e tive sucesso usando um &lt;code&gt;while&lt;/code&gt; com um &lt;code&gt;case&lt;/code&gt; e o comando &lt;code&gt;shift&lt;/code&gt;. Se você precisar de inspiração, consulte o meu repositório &lt;a href=&quot;https://github.com/possatti/pokemonsay/blob/master/pokemonsay.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“pokemonsay”&lt;/a&gt; no Github.&lt;/p&gt;
&lt;h2 id=&quot;Pipe-e-redirecao&quot;&gt;&lt;a href=&quot;#Pipe-e-redirecao&quot; class=&quot;headerlink&quot; title=&quot;Pipe e redireção&quot;&gt;&lt;/a&gt;Pipe e redireção&lt;/h2&gt;&lt;p&gt;Essa é provavelmente a coisa mais interessante que você pode fazer em shell script. É usando &lt;em&gt;Pipes&lt;/em&gt; (literalmente, canos, ou tubos) e redireção que você vai conseguir libertar os verdadeiros poderes do shell script.&lt;/p&gt;
&lt;p&gt;Antes de falar sobre isso, eu tenho que explicar uma coisa mais básica: &lt;em&gt;File Descriptors&lt;/em&gt;. No mundo do Unix e Linux existe o que nós chamamos de &lt;em&gt;“file descriptor”&lt;/em&gt;. Qualquer programa têm três &lt;em&gt;file descriptors&lt;/em&gt;: Standard Input, Standard Output, e Standard Error. Comumente abreviados: &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; e &lt;code&gt;stderr&lt;/code&gt;. O programa irá ler dados do &lt;code&gt;stdin&lt;/code&gt;, irá escrever em &lt;code&gt;stdout&lt;/code&gt;, e irá escrever os erros para &lt;code&gt;stderr&lt;/code&gt;. Muitas vezes, o texto vindo de &lt;code&gt;stdin&lt;/code&gt; será o texto digitado pelo usuário no teclado. Mas muitas outras vezes, esse texto será recebido de forma programática.&lt;/p&gt;
&lt;p&gt;Quando usamos pipe &lt;code&gt;|&lt;/code&gt;, nós estamos conectando o &lt;code&gt;stdout&lt;/code&gt; do comando à esquerda, com o &lt;code&gt;stdin&lt;/code&gt; do comando à direita. Também é possível fazer vários pipes em sequência. Você deve imaginar que o texto está fluindo da esquerda para a direita, e que cada comando está modificando o texto, ou agindo de alguma forma sobre ele. Vamos à um exemplo simples:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Imprime &quot;laranja_123&quot; (minúsculo)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;LARANJA_123&quot;&lt;/span&gt; | tr &lt;span class=&quot;string&quot;&gt;&#39;[:upper:]&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;[:lower:]&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;O &lt;code&gt;tr&lt;/code&gt; é um programa que troca alguns caracteres por outros (&lt;code&gt;man tr&lt;/code&gt;). Perceba que o &lt;code&gt;echo&lt;/code&gt; escreveu o texto em seu &lt;code&gt;stdout&lt;/code&gt; (normalmente seria impresso, mas não foi devido ao pipe), e seu &lt;code&gt;stdout&lt;/code&gt; foi redirecionado para o &lt;code&gt;stdin&lt;/code&gt; de &lt;code&gt;tr&lt;/code&gt;.  E o &lt;code&gt;tr&lt;/code&gt;, após manipular o texto (substituir maiúsculas por minúsculas), escreveu o resultado em seu &lt;code&gt;stdout&lt;/code&gt;, que por sua vez foi impresso na tela.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Imprime &quot;laranja&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;LARANJA_123&quot;&lt;/span&gt; | tr &lt;span class=&quot;string&quot;&gt;&#39;[:upper:]&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;[:lower:]&#39;&lt;/span&gt; | tr &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;[_0-9]&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Mais um pipe agora. Dessa vez, o &lt;code&gt;stdout&lt;/code&gt; do primeiro &lt;code&gt;tr&lt;/code&gt; não é impresso, mas é redirecionado para o &lt;code&gt;stdin&lt;/code&gt; do segundo &lt;code&gt;tr&lt;/code&gt;. O segundo &lt;code&gt;tr&lt;/code&gt; irá ler o texto de seu &lt;code&gt;stdin&lt;/code&gt;, modificá-lo (remover os números e underline &lt;code&gt;_&lt;/code&gt;), e escrever em seu &lt;code&gt;stdout&lt;/code&gt;. Como não há mais nenhuma redireção, seu &lt;code&gt;stdout&lt;/code&gt; será impresso.&lt;/p&gt;
&lt;p&gt;Também podemos fazer redireções usando arquivos. &lt;code&gt;&amp;gt;&lt;/code&gt; é usado para redirecionar o &lt;code&gt;stdout&lt;/code&gt; para um arquivo, porém apaga o conteúdo do arquivo se ele já existir. &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; faz o mesmo que &lt;code&gt;&amp;gt;&lt;/code&gt;, porém não apaga o conteúdo original do arquivo. Ao final do script abaixo, teremos um arquivo com três frutas: Caju, Mamão e Pêra.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Escreve &quot;Banana&quot; no arquivo &quot;frutas.txt&quot;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Banana&quot;&lt;/span&gt; &amp;gt; frutas.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Apaga o conteúdo do arquivo inteiro, e depois escreve &quot;Caju&quot; nele.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Caju&quot;&lt;/span&gt; &amp;gt; frutas.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Escreve &quot;Mamão&quot; no final do arquivo, sem apagar seu conteúdo.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Mamão&quot;&lt;/span&gt; &amp;gt;&amp;gt; frutas.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Escreve &quot;Pêra_123&quot; no final do arquivo, sem apagar seu conteúdo.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Pêra_123&quot;&lt;/span&gt; &amp;gt;&amp;gt; frutas.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Equivalente ao &lt;code&gt;&amp;gt;&lt;/code&gt; temos o &lt;code&gt;&amp;lt;&lt;/code&gt; que faz exatamente o contrário. Ele serve para “puxarmos” o texto de um arquivo e fornecer como entrada para o &lt;code&gt;stdin&lt;/code&gt; de um programa. Exemplo:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Transforma o texto de &#39;frutas.txt&#39; para maiúsculas.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tr &lt;span class=&quot;string&quot;&gt;&#39;[:lower:]&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;[:upper:]&#39;&lt;/span&gt; &amp;lt; frutas.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;O texto contido em &lt;code&gt;frutas.txt&lt;/code&gt; será direcionado para o &lt;code&gt;stdin&lt;/code&gt; de &lt;code&gt;tr&lt;/code&gt;, que irá modificar o texto e imprimir na tela.&lt;/p&gt;
&lt;p&gt;Também é comum usarmos &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; e &lt;code&gt;|&lt;/code&gt; tudo junto. É um pouco difícil de se acostumar com a leitura. Mas é algo comum e útil. Veja o exemplo abaixo.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Transforma o texto de &#39;frutas.txt&#39; para maiúsculas, remove números e &#39;_&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# e grava em &#39;FRUTAS.TXT&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Perceba que nada é impresso. Pois tudo é gravado em &#39;FRUTAS.TXT&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tr &lt;span class=&quot;string&quot;&gt;&#39;[:lower:]&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;[:upper:]&#39;&lt;/span&gt; &amp;lt; frutas.txt | tr &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;[_0-9]&#39;&lt;/span&gt; &amp;gt; FRUTAS.TXT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Pêra! (huehue) Se existe &lt;code&gt;&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, deve existir também &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, já que existe &lt;code&gt;&amp;lt;&lt;/code&gt;. Sim, senhor. E o nome disso é &lt;a href=&quot;https://en.wikipedia.org/wiki/Here_document&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“Here Document”&lt;/a&gt;. Ao invés de ler de um arquivo (como &lt;code&gt;&amp;lt;&lt;/code&gt;) o texto será lido do próprio script.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tr &lt;span class=&quot;string&quot;&gt;&#39;[:lower:]áãçó&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;[:upper:]ÁÃÇÓ&#39;&lt;/span&gt; &amp;lt;&amp;lt; EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;O empenho em analisar o aumento &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; diálogo entre os diferentes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setores produtivos estimula a padronização dos modos de operação&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;convencionais.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Desta maneira, o julgamento imparcial das eventualidades cumpre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;um papel essencial na formulação &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; impacto na agilidade decisória.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EOF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Perceba que depois do &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; temos um token (&lt;code&gt;EOF&lt;/code&gt;) que abre o texto do &lt;a href=&quot;http://www.lerolero.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lerolero.com&lt;/a&gt;, e em seguida o &lt;strong&gt;mesmo token&lt;/strong&gt; deverá ser repetido em sua própria linha, para fechar o texto. O texto que está entre os dois &lt;code&gt;EOF&lt;/code&gt; (&lt;em&gt;end of file&lt;/em&gt;, fim de arquivo), será usado como entrada de dados para o &lt;code&gt;tr&lt;/code&gt;, que por usa vez imprimirá o texto inteiro em letras maiúsculas. É comum usarmos a sigla &lt;code&gt;EOF&lt;/code&gt; como token, mas pode ser qualquer palavra, como &lt;code&gt;LEROLERO&lt;/code&gt;, ou &lt;code&gt;HELLO_WORLD!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Agora um pequeno exercício mental. Tente entender que parte de texto está servindo de entrada para qual comando. Boa sorte.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh &amp;lt;&amp;lt; MIND&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh &amp;lt;&amp;lt; BLOWING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Mind blowing.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BLOWING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MIND&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Cada &lt;em&gt;file descriptor&lt;/em&gt; tem um número associado: &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;; &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;; e &lt;code&gt;stderr&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;. É comum redirecionarmos o &lt;code&gt;stderr&lt;/code&gt; de um programa para o &lt;code&gt;stdout&lt;/code&gt; do mesmo programa. Fazemos isso usando &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;. Isso é muito útil quando temos um programa que escreve coisas importantes para &lt;code&gt;stderr&lt;/code&gt;, porém nós queremos gravar em um arquivo, por exemplo. Para isso fazemos &lt;code&gt;prog 2&amp;gt;&amp;amp;1 &amp;gt; meu.log&lt;/code&gt;. Ou ainda podemos gravar o &lt;code&gt;stdout&lt;/code&gt; e o &lt;code&gt;stderr&lt;/code&gt; em diferentes arquivos: &lt;code&gt;prog 1&amp;gt; meu.log 2&amp;gt; erros.log&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;E se quisermos direcionar o &lt;code&gt;stdout&lt;/code&gt; para &lt;code&gt;stderr&lt;/code&gt;, usamos &lt;code&gt;1&amp;gt;&amp;amp;2&lt;/code&gt;. Você pode usar isso para escrever em &lt;code&gt;stderr&lt;/code&gt; no seu script através de &lt;code&gt;echo 1&amp;gt;&amp;amp;2&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime através do `stdout`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;World&quot;&lt;/span&gt; 1&amp;gt;&amp;amp;2  &lt;span class=&quot;comment&quot;&gt;# Imprime na tela, porém através do `stderr`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Redireções também funcionam com estruturas como &lt;code&gt;for&lt;/code&gt; e &lt;code&gt;while&lt;/code&gt;. Quando você chega nesse nível, as coisas podem ficar extremamente confusas. O exemplo abaixo, lê as linhas de um arquivo &lt;code&gt;lower.txt&lt;/code&gt;, colocando cada uma delas na variável &lt;code&gt;$linha&lt;/code&gt;, que é “&lt;code&gt;echo&lt;/code&gt;ada” para &lt;code&gt;tr&lt;/code&gt;, que transforma tudo em maiúsculas. Porém o &lt;code&gt;stdout&lt;/code&gt; de &lt;code&gt;tr&lt;/code&gt; vai para um segundo &lt;code&gt;tr&lt;/code&gt; que apaga as vogais do texto. E em seguida, o resultado é escrito em &lt;code&gt;UPPER.txt&lt;/code&gt;. Loucura.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; linha; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$linha&lt;/span&gt; | tr &lt;span class=&quot;string&quot;&gt;&#39;[:lower:]&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;[:upper:]&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt; &amp;lt; lower.txt | tr &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;aeiou&#39;&lt;/span&gt; &amp;gt; UPPER.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Era possível escrever o script acima de forma mais simples. Mas eu quis fazer assim, para você exercitar seu poderoso cérebro.&lt;/p&gt;
&lt;h2 id=&quot;Funcoes&quot;&gt;&lt;a href=&quot;#Funcoes&quot; class=&quot;headerlink&quot; title=&quot;Funções&quot;&gt;&lt;/a&gt;Funções&lt;/h2&gt;&lt;p&gt;Funções funcionam como mini-scripts contidos no seu script. Elas são declaradas como &lt;code&gt;foo() { ... }&lt;/code&gt; e são invocadas como qualquer outro comando: &lt;code&gt;foo arg1 arg2 arg3 ...&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;somar&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# Soma os dois argumentos recebidos *pela função*.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	expr &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Processa todos os argumentos recebidos pelo script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# somando todos eles.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resultado=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; [ -n &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; ]; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# Soma o argumento com o resultado atual.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	resultado=`somar &lt;span class=&quot;variable&quot;&gt;$resultado&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# Coloca o $2 no lugar do $1; o $3 no lugar do $2; etc.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;shift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Soma total: &lt;span class=&quot;variable&quot;&gt;$resultado&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Perceba que dentro da função &lt;code&gt;$1&lt;/code&gt; e &lt;code&gt;$2&lt;/code&gt; são argumentos recebidos &lt;strong&gt;pela função&lt;/strong&gt;, e não pelo script. Do lado de fora da função, nós estamos usando o &lt;code&gt;$1&lt;/code&gt; que é o primeiro argumento do nosso script. Veja que as duas coisas não se misturam.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cuidado:&lt;/strong&gt; as funções podem alterar variáveis do escopo global:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;troll&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x=2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$x&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime &#39;1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;troll  &lt;span class=&quot;comment&quot;&gt;# Muda o valor de &#39;x&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$x&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Imprime &#39;2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Eu acho que isso é o que tem de mais importante para falar sobre as funções em shell script. Acho que você deve saber o que fazer a partir daqui. Mas me sinto culpado de não colocar um exemplo um pouco mais complexo. Então abaixo está uma função que calcula o fatorial de um número…&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;fatorial&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-gt&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt; ]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		i=`expr &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; - 1`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		j=`fatorial &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		k=`expr &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; \* &lt;span class=&quot;variable&quot;&gt;$j&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$k&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Calcula os 5 primeiros fatoriais.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `seq 5`; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fatorial &lt;span class=&quot;variable&quot;&gt;$n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Matematica&quot;&gt;&lt;a href=&quot;#Matematica&quot; class=&quot;headerlink&quot; title=&quot;Matemática&quot;&gt;&lt;/a&gt;Matemática&lt;/h2&gt;&lt;p&gt;De vez em quando precisamos fazer uma conta ou outra em shell script. A forma como fazemos isso é usando qualquer comando que faça contas. Alguns dos mais úteis são &lt;code&gt;expr&lt;/code&gt; e &lt;code&gt;bc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O mais básico é o &lt;code&gt;expr&lt;/code&gt;. Ele serve para fazer contas simples, mas deixa a desejar para contas mais complexas e de número flutuante. E ele é um pouco chato quanto aos espaços. Você precisa separar cada um dos números e operadores, pois eles devem ser recebidos como diferentes argumentos. E você precisa ter cuidado com o &lt;code&gt;*&lt;/code&gt; de multiplicação, para que ele não seja interpretado como um wildcard antes mesmo de ser recebido pelo &lt;code&gt;expr&lt;/code&gt;, então use &lt;code&gt;\*&lt;/code&gt; ou &lt;code&gt;&amp;#39;*&amp;#39;&lt;/code&gt;. O mesmo vale para os parênteses, use &lt;code&gt;\( ... \)&lt;/code&gt;, ou &lt;code&gt;&amp;#39;(&amp;#39; ... &amp;#39;)&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;expr 2 + 2  &lt;span class=&quot;comment&quot;&gt;# &quot;4&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expr 2+2  &lt;span class=&quot;comment&quot;&gt;# &quot;2+2&quot; -- lol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expr 2+2 + 2  &lt;span class=&quot;comment&quot;&gt;# &quot;expr: non-integer argument&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expr 2 &lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt; 3  &lt;span class=&quot;comment&quot;&gt;# &quot;6&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expr 8 \* 0.5 &lt;span class=&quot;comment&quot;&gt;# &quot;expr: non-integer argument&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expr 8 / 4 &lt;span class=&quot;comment&quot;&gt;# &quot;2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expr 8 / 5 &lt;span class=&quot;comment&quot;&gt;# &quot;1&quot; -- A divisão é inteira&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expr \( 3 + 7 \) / \( 1 + 1 \)  &lt;span class=&quot;comment&quot;&gt;# &quot;5&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Como você pode ver, &lt;code&gt;expr&lt;/code&gt; apenas gosta de números inteiros. Além disso, expressões mais complexas ficam extremamente longas, já que você tem que colocar espaços ao redor de tudo.&lt;/p&gt;
&lt;p&gt;Para contas um pouco mais complexas, ou quando você quiser usar números decimais, recomendo usar o &lt;code&gt;bc&lt;/code&gt;. Porém este programa possui outro inconveniente: você tem que passar as contas para ele por redirecionamento, pois ele não processa contas pelos argumentos. E para contas com muitas casas decimais, use &lt;code&gt;bc -l&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2 + 2&quot;&lt;/span&gt; | bc  &lt;span class=&quot;comment&quot;&gt;# &quot;4&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2+2 + 2&quot;&lt;/span&gt; | bc  &lt;span class=&quot;comment&quot;&gt;# &quot;6&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2*3&quot;&lt;/span&gt; | bc  &lt;span class=&quot;comment&quot;&gt;# &quot;6&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;8 * 0.5&quot;&lt;/span&gt; | bc  &lt;span class=&quot;comment&quot;&gt;# &quot;4.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;8 / 4&quot;&lt;/span&gt; | bc  &lt;span class=&quot;comment&quot;&gt;# &quot;2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;8 / 5&quot;&lt;/span&gt; | bc  &lt;span class=&quot;comment&quot;&gt;# &quot;1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;8 / 5&quot;&lt;/span&gt; | bc &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# &quot;1.60000000000000000000&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;(3 + 7) /2&quot;&lt;/span&gt; | bc  &lt;span class=&quot;comment&quot;&gt;# &quot;5&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2.22 / 1.22 * 0.75&quot;&lt;/span&gt; | bc  &lt;span class=&quot;comment&quot;&gt;# &quot;.75&quot; -- What???&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2.22 / 1.22 * 0.75&quot;&lt;/span&gt; | bc &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# &quot;1.36475409836065573770&quot; -- Hmmmm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Eu nunca usei muito o &lt;code&gt;bc&lt;/code&gt;, mas parece que ele é capaz de fazer &lt;a href=&quot;https://en.wikipedia.org/wiki/Bc_(programming_language)#GNU_bc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bem mais&lt;/a&gt;. Se você precisar de expressões matemáticas complexas, dê uma olhada na sua documentação com carinho.&lt;/p&gt;
&lt;h2 id=&quot;Manipulacao-de-texto&quot;&gt;&lt;a href=&quot;#Manipulacao-de-texto&quot; class=&quot;headerlink&quot; title=&quot;Manipulação de texto&quot;&gt;&lt;/a&gt;Manipulação de texto&lt;/h2&gt;&lt;p&gt;Umas das coisas mais comuns que você vai fazer em shell script é manipular texto. Por isso é bom que você saiba fazer isso bem. Minha sugestão é que você aprenda bem, um dos seguintes programas: &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt; ou &lt;code&gt;perl&lt;/code&gt;. Eu costumo usar o &lt;code&gt;sed&lt;/code&gt;. Porém, explicar como ele funciona é um tutorial à parte. Mas veja algumas coisas básica que você pode fazer com o &lt;code&gt;sed&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Imprime todo o texto recebido, porém substituindo &quot;banana&quot; por &quot;maçã&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;banana-banana&quot;&lt;/span&gt; | sed &lt;span class=&quot;string&quot;&gt;&#39;s/banana/maçã/g&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# &quot;maçã-maçã&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Imprime apenas as linhas que começam com &quot;Erro&quot; ou &quot;erro&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Uva\nErro 1\nPêra\nerro2-critico&quot;&lt;/span&gt; | sed -nr &lt;span class=&quot;string&quot;&gt;&#39;/^[Ee]rro/p&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# &quot;Erro 1\nerro2-critico&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Formata um número de telefone&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;27988882222&#39;&lt;/span&gt; | sed -r &lt;span class=&quot;string&quot;&gt;&#39;s/(.&amp;#123;2&amp;#125;)(.&amp;#123;1&amp;#125;)(.&amp;#123;4&amp;#125;)(.&amp;#123;4&amp;#125;)/(\1) \2 \3-\4/&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# &quot;(27) 9 8888-2222&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Pega apenas o nome do arquivo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fotos/viagem/familia.jpg&quot;&lt;/span&gt; | sed -r &lt;span class=&quot;string&quot;&gt;&#39;s;.*/([a-Z]+)\..+;\1;&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# &quot;familia&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Infelizmente não tem como eu explicar aqui com detalhes como funciona o &lt;code&gt;sed&lt;/code&gt;. Mas, pelo menos, o primeiro exemplo você deve ter entendido. Eu, pessoalmente, aprendi o que sei de &lt;code&gt;sed&lt;/code&gt; (30% do total, talvez) usando uma &lt;a href=&quot;http://www.grymoire.com/Unix/Sed.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;página na internet que parecia ter sido feita no período jurássico&lt;/a&gt;. Sinta-se livre para buscar qualquer fonte que possa te ajudar.&lt;/p&gt;
&lt;h2 id=&quot;Conclusao&quot;&gt;&lt;a href=&quot;#Conclusao&quot; class=&quot;headerlink&quot; title=&quot;Conclusão&quot;&gt;&lt;/a&gt;Conclusão&lt;/h2&gt;&lt;p&gt;Essa é a despedida. Depois de tudo isso, eu agora espero que você consiga usar shell script para resolver seus problemas. Se ficou faltando alguma coisa, ou não deu para entender alguma parte, pode postar o seu feedback aqui nos comentários.&lt;/p&gt;
&lt;p&gt;É isso aí. Abraço.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Neste post eu explico sobre várias estruturas usadas em shell script como: loops, condicionais, pipes, redireção, globs, substituição de comandos e mais.
    
    </summary>
    
    
      <category term="shell script" scheme="http://possatti.com.br/tags/shell-script/"/>
    
  </entry>
  
  <entry>
    <title>ZettaJS</title>
    <link href="http://possatti.com.br/zettajs/"/>
    <id>http://possatti.com.br/zettajs/</id>
    <published>2015-03-31T04:11:36.000Z</published>
    <updated>2016-06-24T22:25:13.011Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/zetta-logo.svg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Recentemente fiz um trabalho, na faculdade, sobre Internet das Coisas. Para esse trabalho eu tive de escrever um documento explicando sobre o assunto, e também o Zetta, que é uma plataforma para a Internet das Coisas. Além de desenvolver uma pequena aplicação que ilustrasse o tema. Então resolvi aproveitar para escrever um post sobre isso.&lt;/p&gt;
&lt;p&gt;A maior parte do que eu escrevi aqui, já era parte do meu trabalho. Mas eu aperfeiçoei alguns trechos para que algumas coisas ficassem mais claras, e o texto ficasse mais fácil de acompanhar.&lt;/p&gt;
&lt;p&gt;Eu irei começar falando sobre Internet das Coisas, de forma geral. E em seguida vou apresentar o Zetta, explicando para que serve e quais os seus pontos fortes e fracos. E no final, demonstrarei como colocar em execução uma aplicação do Zetta que eu desenvolvi.&lt;/p&gt;
&lt;h2 id=&quot;Introducao-a-Internet-das-Coisas&quot;&gt;&lt;a href=&quot;#Introducao-a-Internet-das-Coisas&quot; class=&quot;headerlink&quot; title=&quot;Introdução a Internet das Coisas&quot;&gt;&lt;/a&gt;Introdução a Internet das Coisas&lt;/h2&gt;&lt;p&gt;Um conceito que tem ganhado popularidade mais recentemente é o de &lt;a href=&quot;http://pt.wikipedia.org/wiki/Internet_das_Coisas&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Internet das Coisas&lt;/a&gt; (IoT, da sigla em inglês para “Internet of Things”). Esse conceito diz respeitos a objetos embarcados com dispositivos eletrônicos que podem se conectar através de uma rede e trocar informações entre si.&lt;/p&gt;
&lt;p&gt;Em Internet das Coisas, as “coisas” podem ser inúmeros tipos de dispositivos. Como equipamentos para monitoramento de batimentos cardíacos, luminosidade, velocidade, controladores, luzes, motores, veículos, e muitas outras coisas. Esses dispositivos tem a capacidade de coletar informações úteis e deixá-las fluir entre os outros dispositivos conectados, de forma autônoma. Tudo isso ficará mais claro ao executar a aplicação que desenvolvi.&lt;/p&gt;
&lt;p&gt;Para a aplicação do conceito de IoT, existem muitas plataformas e ferramentas. Como, por exemplo: Carriots, Xively, ZettaJS, ThingSpeak, Zatar e muitas outras. Mas aqui eu irei tratar apenas do Zetta.&lt;/p&gt;
&lt;h2 id=&quot;Sobre-o-Zetta&quot;&gt;&lt;a href=&quot;#Sobre-o-Zetta&quot; class=&quot;headerlink&quot; title=&quot;Sobre o Zetta&quot;&gt;&lt;/a&gt;Sobre o Zetta&lt;/h2&gt;&lt;p&gt;O Zetta é uma plataforma Open Source construída em cima do &lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt; para criar servidores para aplicação de Internet das Coisas. Tendo seu primeiro commit feito no dia 18 de abril de 2014 em seu &lt;a href=&quot;https://github.com/zettajs/zetta/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;repositório oficial&lt;/a&gt;, o Zetta é uma plataforma relativamente nova, mas em constante desenvolvimento. Em sua &lt;a href=&quot;http://www.zettajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;página principal&lt;/a&gt;, o Zetta declara utilizar uma API &lt;a href=&quot;http://pt.wikipedia.org/wiki/REST&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RESTful&lt;/a&gt;, &lt;a href=&quot;http://pt.wikipedia.org/wiki/WebSocket&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebSockets&lt;/a&gt; e &lt;a href=&quot;http://en.wikipedia.org/wiki/Reactive_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Programação Reativa&lt;/a&gt; para conectar diversos dispositivos e proporcionar a criação de aplicações com intensa manipulação de dados, em tempo real.&lt;/p&gt;
&lt;p&gt;Como eu disse, o Zetta funciona em cima do Node.js (ou apenas Node), que é uma plataforma construída usando o V8, o Runtime de JavaScript do Google Chrome. O Node é útil para construir servidores web de forma rápida e fácil. E a linguagem JavaScript é utilizada para a programação.&lt;/p&gt;
&lt;p&gt;É possível executar um servidor Zetta em uma variedade de dispositivos, desde um PC qualquer, até um Arduíno, ou um Raspberry Pi. Assim o servidor pode se comunicar com diversos equipamentos conectados, como LEDs, sensores, telas e basicamente tudo com o qual o seu dispositivo puder se comunicar.&lt;/p&gt;
&lt;p&gt;Os desenvolvedores do Zetta, desenvolveram também o Zetta Browser. Que é uma aplicação web que pode ser utilizada para navegar através da API do Zetta. Assim, é possível apontá-lo para o endereço de um servidor Zetta e visualizar em tempo real todos os dados sendo coletados por aquele servidor. Bem como interagir com os dispositivos conectados a ele. Isso tudo em uma interface agradável e intuitiva. Contudo, o browser é um pouco instável, e as vezes apresenta algumas falhas. Mas, no geral, é uma ferramenta muito útil.&lt;/p&gt;
&lt;p&gt;O Zetta objetiva proporcionar uma maneira fácil e rápida de projetar aplicações para a Internet das Coisas. E proporcionando flexibilidade para controlar detalhes da aplicação.&lt;/p&gt;
&lt;p&gt;Porém um dos seus pontos fracos está na sua data de origem. Tendo surgido por volta do início de 2014, é de se esperar que não seja uma plataforma muito madura ainda. Ao navegar pelo site oficial, é fácil perceber pontos em que falta documentação, ou links que te levam a artigos completamente vazios. Ainda assim, a documentação no site é suficiente para iniciar o aprendizado. Porém, provavelmente chegará uma hora em que você sentirá falta de algumas informações, assim como eu senti.&lt;/p&gt;
&lt;p&gt;Ainda assim, o Zetta aparenta ser uma plataforma simples, robusta e estável. É possível utilizá-lo para realizar uma enormidade de projetos. E é uma ótima escolha para aqueles que estão iniciando com a Internet das Coisas, ou apenas querem matar a curiosidade.&lt;/p&gt;
&lt;p&gt;Outra vantagem para o Zetta é que, diferente de muitas plataformas com propósitos puramente comerciais, esse é um projeto Open Source (utilizando a licensa MIT) e sem fins comerciais (apesar de que você pode, sim, usá-lo para criar aplicações comerciais). E é um projeto que está em constante desenvolvimento.&lt;/p&gt;
&lt;p&gt;Mas a falta de uma grande empresa por trás do Zetta pode dificultar o seu uso em aplicações de larga escala. Por falta, por exemplo, de um suporte dedicado exclusivamente a atender seus clientes e a falta de garantia de funcionamento.&lt;/p&gt;
&lt;h2 id=&quot;Arquitetura-do-Zetta&quot;&gt;&lt;a href=&quot;#Arquitetura-do-Zetta&quot; class=&quot;headerlink&quot; title=&quot;Arquitetura do Zetta&quot;&gt;&lt;/a&gt;Arquitetura do Zetta&lt;/h2&gt;&lt;p&gt;A arquitetura de uma aplicação Zetta é basicamente a seguinte: existe um servidor Zetta central executando na nuvem (no Heroku, por exemplo), que está conectado a alguns Hubs (como um Raspberry Pi ou um Beaglebone) que rodam instâncias locais de um servidor Zetta. Esses Hubs por sua vez estão conectados a equipamentos eletrônicos e sensores (como exemplo, uma célula fotovoltaica e uma LED). Vejam isso ilustrado na &lt;strong&gt;INCRÍVEL&lt;/strong&gt; figura que eu fiz:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/arquitetura-do-zetta.jpg&quot; alt=&quot;Arquitetura do Zetta&quot;&gt;&lt;/p&gt;
&lt;p&gt;Dessa maneira, dados são obtidos dos diversos equipamentos e sensores e levados aos servidores dos hubs, que os encaminha ao servidor central. Isso funciona de forma geo-distribuída, então é possível que, por exemplo, um sensor fotovoltaico lá no japão faça com que uma lâmpada acenda aqui no Brasil.&lt;/p&gt;
&lt;p&gt;Essa lógica, de como as coisas acontecem e em função do quê, está toda nos servidores, podendo estar até mesmo distribuída entre os hubs e o servidor central.&lt;/p&gt;
&lt;h2 id=&quot;Demonstracao&quot;&gt;&lt;a href=&quot;#Demonstracao&quot; class=&quot;headerlink&quot; title=&quot;Demonstração&quot;&gt;&lt;/a&gt;Demonstração&lt;/h2&gt;&lt;p&gt;Para exemplificar o uso do Zetta, eu desenvolvi uma aplicação simples, baseada no &lt;a href=&quot;http://www.zettajs.org/projects/2014/10/13/Hello-World.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tutorial para iniciantes&lt;/a&gt; disponível no site oficial. E adicionalmente, incrementei com uma funcionalidade a mais (controlar o player do meu PC), para exemplificar a criação de drivers.&lt;/p&gt;
&lt;p&gt;O exemplo disponibilizado no site ensina a criar um servidor local que irá servir para ilustrar uma aplicação que controla a luminosidade de um local. No exemplo é utilizado uma mock LED juntamente com uma mock photocell (célula voltaica), de maneira que quando a photocell detecta uma baixa luminosidade, a LED acende. E quando a photocell detecta elevada luminosidade, a LED apaga.&lt;/p&gt;
&lt;p&gt;Para aqueles que não estão familiarizados com o termo, “mock” nesse contexto, quer dizer que não há hardware sendo utilizado. Nem para a photocell, e nem para a LED. Os drivers utilizados procuram simular os comportamentos desses dispositivos. Por isso, é necessário apenas um computador para executar o projeto e ver tudo funcionando.&lt;/p&gt;
&lt;p&gt;Apesar do exemplo, parecer algo simples demais, este exemplo serve bem para ilustrar uma possível aplicação na vida real. Para fazer algo mais útil, você poderia colocar uma célula voltaica verdadeira no telhado da sua casa, e no lugar de uma LED, você usaria algumas lâmpadas da sua casa. Dessa forma, quando a noite chegasse, as lâmpadas da sua casa acenderiam automaticamente. E quando o dia chegasse, elas apagariam, sem a necessidade de qualquer intervenção.&lt;/p&gt;
&lt;p&gt;Se você fosse utilizar um dispositivo real qualquer, conectado ao seu hub, então você precisaria de um driver específico que fizesse a comunicação entre o servidor local e o dispositivo. Há uma variedade de drivers já criados para vários dispositivos e plataformas diferentes. Mas se você não encontrar um que atenda sua necessidade, poderá desenvolver o seu próprio. No projeto que eu desenvolvi, eu exemplifiquei a criação de um driver simples. Porém dependendo da sua necessidade, um pouco de conhecimento de eletrônica poderá ser necessário. Algo que eu não sei, e não tenho como ensinar.&lt;/p&gt;
&lt;p&gt;No projeto, além da funcionalidade básica de controle de luminosidade, eu desenvolvi um driver que pudesse controlar o player de mídia do meu computador (o &lt;a href=&quot;http://banshee.fm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Banshee&lt;/a&gt;). Infelizmente, devido a forma como eu desenvolvi o driver, essa última parte irá funcionar apenas em sistemas operacionais Linux. E que tenham o Banshee instalado… é claro!&lt;/p&gt;
&lt;p&gt;O driver permite pausar a reprodução e voltar a reproduzir a faixa atual. Além de permitir pular para a próxima faixa ou voltar a anterior.&lt;/p&gt;
&lt;p&gt;Imaginando o contexto de Internet das Coisas, podemos imaginar várias aplicações. A minha localização poderia ser monitorada pelo GPS do meu celular, por exemplo. E quando eu estivesse voltando do trabalho, ao chegar próximo de casa, uma música poderia começar a tocar automaticamente em casa. E da mesma forma, parasse quando eu estivesse saindo.&lt;/p&gt;
&lt;h2 id=&quot;Execucao-do-projeto&quot;&gt;&lt;a href=&quot;#Execucao-do-projeto&quot; class=&quot;headerlink&quot; title=&quot;Execução do projeto&quot;&gt;&lt;/a&gt;Execução do projeto&lt;/h2&gt;&lt;p&gt;Todo o &lt;a href=&quot;https://github.com/possatti/sample-zettajs-server/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;código da aplicação&lt;/a&gt; está hospedado no github. E também o &lt;a href=&quot;https://github.com/possatti/zetta-banshee-driver&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;driver para o Banshee&lt;/a&gt;. Para executar o projeto, entre com os comandos abaixo na sua linha de comando. Você precisará instalar no seu computador o &lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node&lt;/a&gt; e o &lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NPM&lt;/a&gt; (que geralmente já vem com o Node).&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Clone o projeto&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/possatti/sample-zettajs-server.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Entre no diretório baixado&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; sample-zettajs-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Instale as dependências necessárias (inclusive o driver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# para o banshee)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Inicie o servidor:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Se você não tiver o git instalado em seu computador. Não há problema. Você pode baixar o &lt;a href=&quot;https://github.com/possatti/sample-zettajs-server/archive/v0.1.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;projeto no github&lt;/a&gt; e continuar com &lt;code&gt;npm install&lt;/code&gt; e &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Com isso, o servidor irá iniciar em localhost, na porta 1337, por padrão. E você, de imediato, irá notar, no log da linha de comando, que a LED está acendendo e apagando toda hora. Isso está correto, a célula fotovoltaica está ocasionando esse comportamento.&lt;/p&gt;
&lt;p&gt;Para visualizar tudo o que está acontecendo, eu recomendo o uso do Zetta Browser. Para abrir o Zetta Browser apontando para o seu servidor local (127.0.0.1:1337), entre com o seguinte endereço no seu navegador:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://browser.zettajs.io/#/overview?url=http://127.0.0.1:1337&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://browser.zettajs.io/#/overview?url=http://127.0.0.1:1337&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mas lembre que isso que você está visualizando é tudo local, apenas. Para realmente ser capaz de acessar este hub através da internet, o servidor local precisa se conectar a um servidor na nuvem. Coisa que esse projeto já está configurado para fazer. Ao ter iniciado o servidor local, ele automaticamente já se conectou ao servidor em hello-zetta.herokuapp.com (isto está configurado no código do projeto). Este servidor do &lt;a href=&quot;https://heroku.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heroku&lt;/a&gt; é disponibilizado pela equipe desenvolvedora do Zetta, para que iniciantes possam usá-lo. Então qualquer um pode criar sua aplicação e se conectar a ele.&lt;/p&gt;
&lt;p&gt;Para acessar a API do servidor local através da internet, use o Zetta Browser apontando para o servidor do Heroku:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://browser.zettajs.io/#/overview?url=http://hello-zetta.herokuapp.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://browser.zettajs.io/#/overview?url=http://hello-zetta.herokuapp.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Com essa URL, você poderá usar o seu celular, por exemplo, para visualizar a LED e a photocell. Além de poder interagir com o Banshee, se você o tiver instalado.&lt;/p&gt;
&lt;p&gt;Mas, por favor, tenha em mente, que como esta é apenas uma aplicação de demonstração, nenhuma etapa de autenticação é feita. Isto quer dizer que qualquer pessoa em qualquer parte do mundo pode acessar a API que o seu servidor local está provendo. Apesar de que isso não é tão alarmante, pois as únicas coisas que eles podem fazer é controlar a mock LED e o Banshee no seu computador.&lt;/p&gt;
&lt;h2 id=&quot;E-agora&quot;&gt;&lt;a href=&quot;#E-agora&quot; class=&quot;headerlink&quot; title=&quot;E agora?&quot;&gt;&lt;/a&gt;E agora?&lt;/h2&gt;&lt;p&gt;Para aprender mais, você pode continuar interagindo com o servidor, e investigar o código, para ver como o projeto funciona. Conhecimentos de NodeJS e JavaScript com certeza irão lhe ajudar. Para aprender mais sobre o Zetta, um bom ponto de partida é o seu próprio &lt;a href=&quot;http://www.zettajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;site&lt;/a&gt;, apesar de que, como eu disse, a documentação do projeto falha em alguns pontos.&lt;/p&gt;
&lt;p&gt;E se estiver interessado, você pode tentar construir sua própria aplicação, segundo uma necessidade ou um desejo que você tem. Comesse com algo simples e vá aperfeiçoando a medida que desejar.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Introdução a internet das coisas, e exemplo de aplicação utilizando o Zetta.
    
    </summary>
    
    
      <category term="javascript" scheme="http://possatti.com.br/tags/javascript/"/>
    
      <category term="IoT" scheme="http://possatti.com.br/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>Git Pro Tip: Diretórios vazios</title>
    <link href="http://possatti.com.br/git-pro-tip-diretorios-vazios/"/>
    <id>http://possatti.com.br/git-pro-tip-diretorios-vazios/</id>
    <published>2015-03-26T00:05:29.000Z</published>
    <updated>2016-06-24T22:25:13.011Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/git-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Nesse post vou falar sobre algo que me aborrecia quando comecei a usar o git. E que pode trazer dificuldades para outros que estejam iniciando com o git. Falarei sobre o fato de que ele não registra diretórios vazios no repositório.&lt;/p&gt;
&lt;h2 id=&quot;O-problema&quot;&gt;&lt;a href=&quot;#O-problema&quot; class=&quot;headerlink&quot; title=&quot;O problema&quot;&gt;&lt;/a&gt;O problema&lt;/h2&gt;&lt;p&gt;Vamos supor a seguinte situação. Você tem um repositório do git, e acabou de criar um diretório vazio dentro dele. E ao tentar gravar suas mudanças, o git simplesmente não detecta que você criou um novo diretório. Como no exemplo:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Cria um diretório vazio&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir novo_dir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Revela o que há no diretório atual&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;novo_dir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Verifica o status do repositório&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;On branch master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Initial commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nothing to commit (create/copy files and use &lt;span class=&quot;string&quot;&gt;&quot;git add&quot;&lt;/span&gt; to track)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Como podem ver, no exemplo, o diretório vazio foi criado. Mas quando usamos o comando &lt;code&gt;git status&lt;/code&gt;, ele simplesmente não detecta que um novo diretório foi criado.&lt;/p&gt;
&lt;p&gt;A razão disso é simples. O git registra apenas arquivos e não diretórios. Se a minha memória não me falha, no SVN você poderia criar diretórios vazios no repositório. Mas não é o caso do git. Pois tudo o que ele busca, para gravar, são arquivos. Então ele nem mesmo se preocupa com o fato de que você criou um novo diretório. Mas se você colocasse um arquivo ali dentro, aí sim, ele detectaria o arquivo e consequentemente o diretório que o contém.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Cria um arquivo no novo diretório&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ touch novo_dir/exemplo.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Verifica o status do repositório&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;On branch master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Initial commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Untracked files:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (use &lt;span class=&quot;string&quot;&gt;&quot;git add &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to include &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; what will be committed)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	novo_dir/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nothing added to commit but untracked files present (use &lt;span class=&quot;string&quot;&gt;&quot;git add&quot;&lt;/span&gt; to track)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Vejam que neste último comando ele detectou o diretório, mas somente por causa do arquivo. O que ele irá gravar, na realidade, é o arquivo. E uma das informações relevantes para gravar o arquivo é onde ele está.&lt;/p&gt;
&lt;h2 id=&quot;Porque-isso-me-incomodaria&quot;&gt;&lt;a href=&quot;#Porque-isso-me-incomodaria&quot; class=&quot;headerlink&quot; title=&quot;Porque isso me incomodaria?&quot;&gt;&lt;/a&gt;Porque isso me incomodaria?&lt;/h2&gt;&lt;p&gt;Alguns podem estranhar, e se perguntar: “Mas e daí? O diretório está vazio mesmo!”. Hoje eu concordo com isso. Mas no começo isso me atrapalhava um pouco, quando eu estava começando a usar o git.&lt;/p&gt;
&lt;p&gt;Como, por exemplo, quando eu estava iniciando um novo projeto e usava uma ferramenta para gerar o esqueleto do meu projeto. Assim, a ferramenta criava uma porção de diretórios onde eu deveria colocar meus arquivos. Mas se eu ainda não tivesse desenvolvido nada ainda, eu teria que deixá-los vazio por algum tempo.&lt;/p&gt;
&lt;p&gt;Isso costumava acontecer comigo quando eu criava um novo projeto do &lt;a href=&quot;https://maven.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;maven&lt;/a&gt; pelo eclipse. O eclipse criava várias pastas vazias, segundo a estrutura de um projeto padrão do maven. E essa estrutura era importante, porque ditava a forma como eu deveria organizar meu projeto. Se eu colocasse um teste no diretório errado, por exemplo, o maven não iria incorporá-lo a build. E por esse motivo, as coisas precisavam estar em seu devido lugar.&lt;/p&gt;
&lt;p&gt;E quando eu tentava gravar as alterações no repositório, o git simplesmente não detectava as novas pastas que haviam sido criadas, apenas os arquivos, como o &lt;code&gt;pom.xml&lt;/code&gt;. Então se eu fosse usar um outro computador, e tivesse que clonar o projeto, ele não viria com a estrutura de pastas que eu precisava. Então eu teria que resgatar tudo da minha memória, ou gastar algum tempo procurando na internet como a estrutura deveria ser.&lt;/p&gt;
&lt;h2 id=&quot;Solucao&quot;&gt;&lt;a href=&quot;#Solucao&quot; class=&quot;headerlink&quot; title=&quot;Solução&quot;&gt;&lt;/a&gt;Solução&lt;/h2&gt;&lt;p&gt;A verdade é que não existe uma solução elegante para isso. É uma característica do git que você deve se acostumar. E com o tempo, essa característica realmente passa a fazer sentido. Afinal de contas, para que gravar um diretório vazio? … Ele está vazio! Então não estamos perdendo nada.&lt;/p&gt;
&lt;p&gt;Mas como eu expliquei, em algumas situações você pode querer subir um diretório vazio intencionalmente. Se esse for o seu caso, há algumas alternativas que podemos recorrer. Há uma &lt;a href=&quot;http://stackoverflow.com/questions/115983/how-can-i-add-an-empty-directory-to-a-git-repository&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;questão no Stack Overflow&lt;/a&gt; que tem excelentes sugestões de como fazer isso. E eu vou descrever aqui duas delas que considero mais importantes.&lt;/p&gt;
&lt;p&gt;Uma das possíveis soluções, é que você crie um arquivo vazio dentro da pasta, chamado &lt;code&gt;deletar-depois&lt;/code&gt;, &lt;code&gt;placeholder&lt;/code&gt;, ou qualquer coisa do gênero. O importante é que fique claro para você, e para sua equipe, que esse arquivo deve ser deletado assim que o diretório for preenchido com algum conteúdo importante.&lt;/p&gt;
&lt;p&gt;Outra alternativa é para o caso de você querer &lt;strong&gt;forçar&lt;/strong&gt; com que o diretório esteja &lt;strong&gt;sempre&lt;/strong&gt; vazio (sabe se lá, porque você iria querer isso xD ). Para esta situação, você pode criar um &lt;a href=&quot;http://git-scm.com/docs/gitignore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;/a&gt; dentro da pasta, com o seguinte conteúdo:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Ignora tudo neste diretório&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Exceto este arquivo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!.gitignore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Nessa última alternativa, ninguém nunca irá conseguir gravar um arquivo nessa pasta! A não ser que o &lt;code&gt;.gitignore&lt;/code&gt; seja apagado, posteriormente. Isso pois o git irá ignorar todos os arquivos ali dentro, com exceção do &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dada essas duas soluções, eu encerro aqui. Espero que essa dica seja útil. E se tiverem dúvidas, ou quiserem compartilhar alguma experiência própria, podem escrever aqui nos comentários.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      O git não grava pastas vazias em seus repositórios. Entenda porquê, e como contornar o problema.
    
    </summary>
    
    
      <category term="git" scheme="http://possatti.com.br/tags/git/"/>
    
      <category term="protip" scheme="http://possatti.com.br/tags/protip/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll</title>
    <link href="http://possatti.com.br/jekyll/"/>
    <id>http://possatti.com.br/jekyll/</id>
    <published>2014-08-22T10:27:29.000Z</published>
    <updated>2015-03-25T07:56:29.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/jekyll-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Nesse primeiro post eu resolvi escrever sobre a ferramenta (Jekyll) que eu usei para criar o meu primeiro blog, e como ela pode ser útil para vários propósitos.&lt;/p&gt;
&lt;h3 id=&quot;O-que-e-o-Jekyll&quot;&gt;&lt;a href=&quot;#O-que-e-o-Jekyll&quot; class=&quot;headerlink&quot; title=&quot;O que é o Jekyll?&quot;&gt;&lt;/a&gt;O que é o Jekyll?&lt;/h3&gt;&lt;p&gt;O &lt;a href=&quot;http://jekyllrb.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt; é um gerador de websites estáticos. Em poucas palavras, o que ele faz é converter um monte de html, css, javascript, markdown, etc em um website estático. Para usa-lo, você define templates para exibir diferentes tipos de publicações, e define o conteúdo separadamente.&lt;/p&gt;
&lt;p&gt;Já que você irá definir a parte bruta através de HTML, CSS e JavaScript, isso te permite ter controle total sobre o estilo do website. Ao mesmo tempo que te permite publicar todo o tipo de conteúdo que você definir.&lt;/p&gt;
&lt;p&gt;Você ganha praticidade quando resolve esquematizar o projeto, dividindo-o em templates e conteúdo. Por exemplo, você pode definir um template para posts de um blog, e define o conteúdo dos posts usando uma linguagem mais simples como &lt;a href=&quot;http://en.wikipedia.org/wiki/Markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;markdown&lt;/a&gt; ou &lt;a href=&quot;http://en.wikipedia.org/wiki/Textile_%28markup_language%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;textile&lt;/a&gt; (markdown é o mais usado). Assim, o Jekyll irá se responsabilizar por processar esse conteúdo e enquadra-lo na definição do seu template de posts. Com isso, o resultado final é uma página html completa com o seu conteúdo. Você pode inclusive ter mais de uma definição de template para posts, e em cada post especificar qual template você deseja usar.&lt;/p&gt;
&lt;p&gt;O foco principal do Jekyll está na criação de blogs, mas ele também pode ser usado para projetos mais ambiciosos como por exemplo &lt;a href=&quot;http://www.developmentseed.org/blog/new-healthcare-gov-is-open-and-cms-free/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;o projeto que o grupo Development Seed fez&lt;/a&gt; para criar o portal &lt;a href=&quot;https://www.healthcare.gov/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HealthCare.gov&lt;/a&gt; para o governo norte americano.&lt;/p&gt;
&lt;p&gt;Ferramentas como essa parecem estar ganhado uma popularidade cada vez maior, como alternativas a CMSs (Content Management System), como o &lt;a href=&quot;http://wordpress.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wordpress&lt;/a&gt; e o &lt;a href=&quot;https://www.drupal.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Drupal&lt;/a&gt;. Pois elimina elementos custosos do desenvolvimento e da manutenção, ao mesmo tempo que te permite um maior controle sobre a estrutura do website. Como exemplo, em um website estático você não precisa se preocupar com um banco de dados. Assim você elimina o custo de ter um, e também de ter pessoas que saibam usá-lo.&lt;/p&gt;
&lt;p&gt;Porém, com isso você pode acabar perdendo alguma funcionalidade dinâmica de um CMS, que a princípio necessite de uma aplicação do lado do servidor. Mas você pode facilmente compensar isso usando APIs de terceiros para compor o seu website. Uma funcionalidade comum de um CMS é a gestão de comentários nas páginas. Mas como você poderia alcançar o mesmo efeito em um site totalmente estático? Você pode usar uma API como a do &lt;a href=&quot;https://disqus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Disqus&lt;/a&gt;, que vem ganhando bastante popularidade recentemente, ou a do &lt;a href=&quot;https://developers.facebook.com/docs/plugins/comments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Facebook&lt;/a&gt;. Assim, no final das contas, o que você tem é um pequeno código HTML-JavaScript que você joga em seu template, e assim todas as páginas ganham uma seção de comentários. Uhuul!&lt;/p&gt;
&lt;p&gt;Mas fazer a escolha entre utilizar um CMS ou um gerador de sites estáticos é uma decisão delicada, e que deve ser pensada com cuidado, tendo em vista o objetivo final do projeto.&lt;/p&gt;
&lt;h3 id=&quot;Personalizacao-do-projeto&quot;&gt;&lt;a href=&quot;#Personalizacao-do-projeto&quot; class=&quot;headerlink&quot; title=&quot;Personalização do projeto&quot;&gt;&lt;/a&gt;Personalização do projeto&lt;/h3&gt;&lt;p&gt;É possível ainda, acrescentar outras ferramentas no ciclo de vida do seu projeto. Deixando o desenvolvimento mais a seu próprio gosto. Por exemplo, você pode combinar pre-processadores (como o &lt;a href=&quot;http://lesscss.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Less&lt;/a&gt; ou &lt;a href=&quot;http://sass-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sass&lt;/a&gt;) para a sua build.&lt;/p&gt;
&lt;p&gt;E se você não quiser se preocupar com o desenvolvimento bruto do site, você pode simplesmente escolher um tema já pronto, e se preocupar apenas com o conteúdo. Mas isso te limita a usar o que outras pessoas já criaram.&lt;/p&gt;
&lt;p&gt;Existem vários temas para o Jekyll já prontos, a grande maioria deles focada em blogs. Basta escolher um deles, e começar a publicar… como eu fiz ;) . Mas se você tiver os conhecimentos necessários, você pode se aventurar e criar o seu próprio tema, e assim construir tudo completamente personalizado.&lt;/p&gt;
&lt;p&gt;E como eu disse, há vários temas espalhados pela internet (você pode dar uma olhada &lt;a href=&quot;http://jekyllthemes.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nesse link&lt;/a&gt; para conferir vários deles) feitos por diversas pessoas que resolveram compartilhar seus trabalhos. Há alguns bem simples e outros mais elaborados e de muito bom gosto. Cabe a você escolher.&lt;/p&gt;
&lt;p&gt;Mas já adianto que se você pretende criar algo muito diferente de um blog, você provavelmente terá que criar tudo manualmente. Isso não é problema do Jekyll em si, pois ele suporta a geração de diversos tipos de conteúdo, e é possível customiza-lo para o que for necessário. Mas se o que você quer for muito específico é provável que você não encontrará nada pronto pela internet.&lt;/p&gt;
&lt;p&gt;Se o Jekyll não te atender em algum aspecto você pode experimentar outros geradores de sites estáticos como: &lt;a href=&quot;http://octopress.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octopress&lt;/a&gt; (usa o Jekyll), &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;, &lt;a href=&quot;http://nanoc.ws/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nanoc&lt;/a&gt;, entre &lt;a href=&quot;http://staticsitegenerators.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vários outros&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Como-usar&quot;&gt;&lt;a href=&quot;#Como-usar&quot; class=&quot;headerlink&quot; title=&quot;Como usar&quot;&gt;&lt;/a&gt;Como usar&lt;/h3&gt;&lt;p&gt;Não adianta chorar, você provavelmente terá que sujar as mãos em algum momento e usar a linha de comando. Mas não é difícil como algumas pessoas pensam. Logo, pare de reclamar, se for o seu caso, e siga em frente. ¬¬&lt;/p&gt;
&lt;p&gt;Para exemplificar o uso do Jekyll, vou descrever aqui como criar e gerenciar um blog simples, sem nada demais. Assim você terá conhecimento de como ele funciona, e poderá, então, escolher se irá personalizar tudo na mão ou pegar um tema já pronto e pular o trabalho duro. De qualquer forma, é útil ter um conhecimento de como ele funciona.&lt;/p&gt;
&lt;p&gt;O primeiro passo de todos é instala-lo na sua máquina. Para isso consulte as &lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;intruções de instalação&lt;/a&gt; no site oficial. Lá você encontra instruções detalhadas para a instalação na sua plataforma específica.&lt;/p&gt;
&lt;p&gt;Porém, um método fácil de instala-lo é usando o RubyGem (gerenciador de pacotes da linguagem Ruby), através de um único comando:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Talvez você tenha que usar sudo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem install jekyll&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Após isso, basta um comando para criar um novo projeto:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ jekyll new meu-novo-blog&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Assim o jekyll irá criar um exemplo de um blog bem básico com a estrutura exemplificada abaixo (para servir as páginas em localhost basta executar &lt;code&gt;jekyll serve&lt;/code&gt;).&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; meu-novo-blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── about.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _config.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── main.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── feed.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _includes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── footer.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── header.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── head.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── index.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _layouts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── default.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── page.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── post.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── _posts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── 2014-08-30-welcome-to-jekyll.markdown&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Então, permita-me explicar um pouco sobre essa estrutura. &lt;code&gt;_config.yml&lt;/code&gt; é o arquivo de configuração do seu site, que contém informações como: nome do site, seu e-mail, plugins usados, etc. Esse arquivo utiliza a sintaxe &lt;a href=&quot;http://pt.wikipedia.org/wiki/YAML&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YAML&lt;/a&gt;. O diretório &lt;code&gt;_includes&lt;/code&gt; contém “pedaços de HTML” que você usará para definir seus layouts (templates). Em &lt;code&gt;_layouts&lt;/code&gt; você deve colocar os seus templates. (Os layouts são páginas quase completas, esperando apenas para receberem conteúdo.) E, finalmente, em &lt;code&gt;_posts&lt;/code&gt; você define seus posts em uma linguagem simples como o markdown, por exemplo.&lt;/p&gt;
&lt;p&gt;Se você investigar os arquivos html que foram gerados (em &lt;code&gt;_includes/&lt;/code&gt; e &lt;code&gt;_layouts/&lt;/code&gt;), verá que neles foi usado uma notação diferente no meio do html (um monte de chaves &lt;code&gt;{}&lt;/code&gt; espalhados). Isso que está sendo usado, são tags &lt;a href=&quot;http://liquidmarkup.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Liquid&lt;/a&gt;. Elas são &lt;a href=&quot;http://jekyllrb.com/docs/templates/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;usadas pelo Jekyll para a definição dos templates&lt;/a&gt;. Você precisará entender como elas funcionam para quando você quiser criar os seus próprios templates. Mas não são necessárias quando você estiver escrevendo seus posts.&lt;/p&gt;
&lt;p&gt;Você pode notar também que quando executamos &lt;code&gt;jekyll new&lt;/code&gt;, ele criou uma página inicial (&lt;code&gt;index.html&lt;/code&gt;) e um &lt;code&gt;about.md&lt;/code&gt; (que quando processado se tornará &lt;code&gt;about.html&lt;/code&gt;). Além disso, ele gerou um exemplo de um post para você em &lt;code&gt;_posts/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A essa altura você deve querer visualizar o resultado de tudo isso. Então vamos em frente, e depois voltamos para esclarecer mais algumas coisas. Para gerar o website estático é necessário apenas executar o comando &lt;code&gt;jekyll build&lt;/code&gt; e o jekyll irá processar todos os seus arquivos e gerar o resultado no diretório &lt;code&gt;_site&lt;/code&gt;. Isso só já basta para você conseguir o que realmente importa (um website estático), mas vamos fazer um pouco mais do que isso, e vamos executar &lt;code&gt;jekyll serve&lt;/code&gt;. Assim ele irá servir em localhost os arquivos gerados, para que você possa visualizar o site. Então, depois desse último comando, abra o navegador e entre em &lt;code&gt;localhost:4000&lt;/code&gt;, por padrão, e veja o seu mais novo blog! Tcharaaam!&lt;/p&gt;
&lt;p&gt;Repare que é possível executar &lt;code&gt;jekyll serve --watch&lt;/code&gt; para que o Jekyll fique “assistindo” o diretório do projeto. E quando qualquer mudança acontecer (quando você editar um post, por exemplo), ele irá gerar novamente os arquivos necessários. O único arquivo que ele não irá assistir é o &lt;code&gt;_config.yml&lt;/code&gt;. E também repare que não é necessário executar &lt;code&gt;jekyll build&lt;/code&gt; antes de &lt;code&gt;jekyll serve&lt;/code&gt;, pois esse último já executa a build automaticamente.&lt;/p&gt;
&lt;p&gt;Entenda o que o Jekyll fez. Ele construiu o site, em basicamente duas etapas. Primeiramente, ele tomou todos os arquivos que necessitavam de processamento (os arquivos em markdown e textile) e os processou combinando com os layouts e includes necessários,  gerando arquivos de html para cada um deles. Repare que os diretórios de destino dos posts é diferente do comum, o Jekyll usa o nome do post para criar diretórios de destino para eles. Isso da seguinte forma, se você tem um post chamado &lt;code&gt;2014-10-19-exemplo.md&lt;/code&gt; ele será processado e irá parar em &lt;code&gt;_site/2014/10/19/exemplo.html&lt;/code&gt;. Mas fora isso, todos os arquivos vão parar em lugares segundo suas posições relativas ao diretório raiz do projeto (exemplo: &lt;code&gt;/about/index.md&lt;/code&gt; é processado e vai parar em &lt;code&gt;_site/about/index.html&lt;/code&gt;) da forma como você esperaria.&lt;/p&gt;
&lt;p&gt;A segunda etapa da build é mais simples. Ele copia todos os arquivos que não necessitam de processamento, como imagens, css, javascript, etc, para o diretório &lt;code&gt;_site/&lt;/code&gt;. Então, por exemplo, um arquivo &lt;code&gt;/imagens/foto.jpg&lt;/code&gt; vai parar em &lt;code&gt;_site/imagens/foto.jpg&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;YAML-Front-Matter&quot;&gt;&lt;a href=&quot;#YAML-Front-Matter&quot; class=&quot;headerlink&quot; title=&quot;YAML Front Matter&quot;&gt;&lt;/a&gt;YAML Front Matter&lt;/h3&gt;&lt;p&gt;Mas que tipo de arquivos são processados pelo Jekyll exatamente? E quais são simplesmente copiados sem processamento? Por definição do Jekyll, somente são processados os arquivos com extenções do markdown ou textile, e os arquivos que tenham um cabeçalho especial, chamado de &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“YAML Front Matter”&lt;/a&gt;. Quando o Jekyll detectar esse tipo de cabeçalho ele irá processar o arquivo. Um “front matter” deve ser colocada logo no começo do arquivo e se parece com o seguinte:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout: post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: &amp;quot;Jekylll&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modified: 2014-08-22 07:27:29 -0300&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tags: [jekyll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comments: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A sintaxe utilizada para a codificação do “Front Matter” é a &lt;a href=&quot;http://pt.wikipedia.org/wiki/YAML&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YAML&lt;/a&gt; (assim como o arquivo &lt;code&gt;_config.yml&lt;/code&gt;). E nessa seção você pode definir variaveis que serão utilizadas pelo Jekyll (como &lt;code&gt;layout&lt;/code&gt; e &lt;code&gt;title&lt;/code&gt;). E, até mesmo, variáveis personalizadas, como é o caso do exemplo acima em que a variável &lt;code&gt;comments&lt;/code&gt; é utilizada pelo meu tema atual, para saber quando ele deve incluir uma seção de comentários, ou não, em um post.&lt;/p&gt;
&lt;p&gt;E se você quiser que o arquivo seja processado, mas ele não precisa de nenhuma variável, você ainda assim precisa de incluir o front matter. Mas pode deixa-lo vazio, sem nenhuma variável. Isso pode ser útil quando você quer usar Liquid Tags em arquivos css e javascript, por exemplo.&lt;/p&gt;
&lt;h3 id=&quot;Hospedagem-no-Github-Pages&quot;&gt;&lt;a href=&quot;#Hospedagem-no-Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;Hospedagem no Github Pages&quot;&gt;&lt;/a&gt;Hospedagem no Github Pages&lt;/h3&gt;&lt;p&gt;Ok… mas e depois que você criar o seu website e quiser publicá-lo na internet? Você pode optar por várias possibilidades, inclusive a de usar o seu próprio servidor pessoal. Porém, o que eu considero mais prático, no momento, é utilizar a hospedagem gratuita do &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Pages&lt;/a&gt;. Para mim, a forma mais simples para publicar seu site, é você criar um repositório na sua conta do GitHub chamado &lt;code&gt;&amp;lt;seu-nome-de-usuario&amp;gt;.github.io&lt;/code&gt; e subir o seu projeto do Jekyll para o novo repositório. O GitHub irá processar o seu projeto do Jekyll e gerar o seu website estático no endereço &lt;code&gt;&amp;lt;seu-nome-de-usuario&amp;gt;.github.io&lt;/code&gt;. Simples assim. Apenas preste atenção na versão do Jekyll que você está usando e a versão que está sendo usada pelo GitHub (confira &lt;a href=&quot;https://pages.github.com/versions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;aqui&lt;/a&gt;). Mas isso não deve ser um problema.&lt;/p&gt;
&lt;p&gt;Se preferir, você pode construir o site na sua máquina e subir o resultado final para o GitHub Pages. Isso é uma outra possibilidade. Assim, você tem controle de qual versão do Jekyll utilizar, e também usar plugins em sua build (coisa que o github bloqueia para evitar que plugins maliciosos executem). Você pode até usar um domínio personalizado se quiser. Para entender melhor como o GitHub Pages funciona, leia a &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;página oficial do Github Pages&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;O-que-fazer-depois&quot;&gt;&lt;a href=&quot;#O-que-fazer-depois&quot; class=&quot;headerlink&quot; title=&quot;O que fazer depois?&quot;&gt;&lt;/a&gt;O que fazer depois?&lt;/h3&gt;&lt;p&gt;Se você não sabe para onde ir agora, e o que fazer para aprender mais, eu te aconselho a brincar com o blog que criamos nesse tutorial. Crie um novo post; dê uma olhada em como funcionam os layouts e includes; futuque as Liquid Tags e veja como elas funcionam; etc.&lt;/p&gt;
&lt;p&gt;Se você ainda tiver dúvidas ou quiser entender melhor as coisas, eu recomendo que você dê uma olhada na &lt;a href=&quot;http://jekyllrb.com/docs/home/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentação do Jekyll&lt;/a&gt; (em inglês). A documentação é boa, e fala sobre vários aspectos da ferramenta. E tudo está escrito de forma clara e concisa.&lt;/p&gt;
&lt;p&gt;É isso aí! Até mais. :)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Breve introdução ao Jekyll, um gerador de websites estáticos, com foco em blogs.
    
    </summary>
    
    
      <category term="jekyll" scheme="http://possatti.com.br/tags/jekyll/"/>
    
  </entry>
  
</feed>
